/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 368.0, "minX": 0.0, "maxY": 16431.0, "series": [{"data": [[0.0, 368.0], [0.1, 370.0], [0.2, 374.0], [0.3, 378.0], [0.4, 379.0], [0.5, 395.0], [0.6, 397.0], [0.7, 398.0], [0.8, 401.0], [0.9, 406.0], [1.0, 407.0], [1.1, 409.0], [1.2, 410.0], [1.3, 413.0], [1.4, 417.0], [1.5, 419.0], [1.6, 443.0], [1.7, 458.0], [1.8, 476.0], [1.9, 566.0], [2.0, 577.0], [2.1, 580.0], [2.2, 586.0], [2.3, 588.0], [2.4, 589.0], [2.5, 602.0], [2.6, 607.0], [2.7, 609.0], [2.8, 611.0], [2.9, 614.0], [3.0, 615.0], [3.1, 617.0], [3.2, 619.0], [3.3, 630.0], [3.4, 632.0], [3.5, 634.0], [3.6, 640.0], [3.7, 641.0], [3.8, 644.0], [3.9, 660.0], [4.0, 674.0], [4.1, 681.0], [4.2, 722.0], [4.3, 899.0], [4.4, 905.0], [4.5, 943.0], [4.6, 1329.0], [4.7, 1336.0], [4.8, 1345.0], [4.9, 1381.0], [5.0, 1403.0], [5.1, 1404.0], [5.2, 1430.0], [5.3, 1441.0], [5.4, 1453.0], [5.5, 1488.0], [5.6, 1502.0], [5.7, 1512.0], [5.8, 1546.0], [5.9, 1565.0], [6.0, 1577.0], [6.1, 1583.0], [6.2, 1607.0], [6.3, 1626.0], [6.4, 1630.0], [6.5, 1673.0], [6.6, 1701.0], [6.7, 1720.0], [6.8, 1738.0], [6.9, 1817.0], [7.0, 1973.0], [7.1, 1987.0], [7.2, 1993.0], [7.3, 2018.0], [7.4, 2038.0], [7.5, 2054.0], [7.6, 2088.0], [7.7, 2090.0], [7.8, 2169.0], [7.9, 2208.0], [8.0, 2213.0], [8.1, 2236.0], [8.2, 2247.0], [8.3, 2289.0], [8.4, 2298.0], [8.5, 2340.0], [8.6, 2349.0], [8.7, 2353.0], [8.8, 2426.0], [8.9, 2447.0], [9.0, 2459.0], [9.1, 2472.0], [9.2, 2490.0], [9.3, 2520.0], [9.4, 2525.0], [9.5, 2539.0], [9.6, 2568.0], [9.7, 2616.0], [9.8, 2639.0], [9.9, 2722.0], [10.0, 2745.0], [10.1, 2776.0], [10.2, 2826.0], [10.3, 2833.0], [10.4, 2846.0], [10.5, 2893.0], [10.6, 2906.0], [10.7, 2916.0], [10.8, 2952.0], [10.9, 3029.0], [11.0, 3033.0], [11.1, 3038.0], [11.2, 3071.0], [11.3, 3095.0], [11.4, 3100.0], [11.5, 3114.0], [11.6, 3126.0], [11.7, 3150.0], [11.8, 3190.0], [11.9, 3198.0], [12.0, 3211.0], [12.1, 3234.0], [12.2, 3272.0], [12.3, 3292.0], [12.4, 3297.0], [12.5, 3370.0], [12.6, 3375.0], [12.7, 3385.0], [12.8, 3395.0], [12.9, 3407.0], [13.0, 3427.0], [13.1, 3428.0], [13.2, 3438.0], [13.3, 3477.0], [13.4, 3477.0], [13.5, 3522.0], [13.6, 3540.0], [13.7, 3541.0], [13.8, 3551.0], [13.9, 3579.0], [14.0, 3596.0], [14.1, 3597.0], [14.2, 3611.0], [14.3, 3627.0], [14.4, 3634.0], [14.5, 3661.0], [14.6, 3665.0], [14.7, 3670.0], [14.8, 3694.0], [14.9, 3697.0], [15.0, 3705.0], [15.1, 3707.0], [15.2, 3730.0], [15.3, 3735.0], [15.4, 3749.0], [15.5, 3764.0], [15.6, 3777.0], [15.7, 3794.0], [15.8, 3826.0], [15.9, 3849.0], [16.0, 3868.0], [16.1, 3876.0], [16.2, 3888.0], [16.3, 3907.0], [16.4, 3907.0], [16.5, 3927.0], [16.6, 3942.0], [16.7, 3949.0], [16.8, 3955.0], [16.9, 3988.0], [17.0, 4006.0], [17.1, 4007.0], [17.2, 4047.0], [17.3, 4084.0], [17.4, 4101.0], [17.5, 4104.0], [17.6, 4124.0], [17.7, 4159.0], [17.8, 4197.0], [17.9, 4270.0], [18.0, 4296.0], [18.1, 4300.0], [18.2, 4325.0], [18.3, 4370.0], [18.4, 4399.0], [18.5, 4414.0], [18.6, 4453.0], [18.7, 4458.0], [18.8, 4502.0], [18.9, 4597.0], [19.0, 4622.0], [19.1, 4628.0], [19.2, 4654.0], [19.3, 4670.0], [19.4, 4756.0], [19.5, 4778.0], [19.6, 4807.0], [19.7, 4834.0], [19.8, 4884.0], [19.9, 4920.0], [20.0, 4976.0], [20.1, 5015.0], [20.2, 5083.0], [20.3, 5098.0], [20.4, 5107.0], [20.5, 5122.0], [20.6, 5140.0], [20.7, 5142.0], [20.8, 5226.0], [20.9, 5244.0], [21.0, 5288.0], [21.1, 5319.0], [21.2, 5337.0], [21.3, 5363.0], [21.4, 5365.0], [21.5, 5375.0], [21.6, 5389.0], [21.7, 5392.0], [21.8, 5412.0], [21.9, 5422.0], [22.0, 5456.0], [22.1, 5457.0], [22.2, 5477.0], [22.3, 5486.0], [22.4, 5493.0], [22.5, 5496.0], [22.6, 5501.0], [22.7, 5503.0], [22.8, 5514.0], [22.9, 5536.0], [23.0, 5544.0], [23.1, 5545.0], [23.2, 5549.0], [23.3, 5558.0], [23.4, 5558.0], [23.5, 5569.0], [23.6, 5591.0], [23.7, 5592.0], [23.8, 5605.0], [23.9, 5616.0], [24.0, 5624.0], [24.1, 5663.0], [24.2, 5670.0], [24.3, 5677.0], [24.4, 5688.0], [24.5, 5700.0], [24.6, 5720.0], [24.7, 5727.0], [24.8, 5734.0], [24.9, 5744.0], [25.0, 5747.0], [25.1, 5757.0], [25.2, 5772.0], [25.3, 5778.0], [25.4, 5791.0], [25.5, 5802.0], [25.6, 5805.0], [25.7, 5806.0], [25.8, 5815.0], [25.9, 5816.0], [26.0, 5819.0], [26.1, 5820.0], [26.2, 5826.0], [26.3, 5831.0], [26.4, 5842.0], [26.5, 5851.0], [26.6, 5873.0], [26.7, 5889.0], [26.8, 5898.0], [26.9, 5906.0], [27.0, 5911.0], [27.1, 5919.0], [27.2, 5926.0], [27.3, 5940.0], [27.4, 5942.0], [27.5, 5949.0], [27.6, 5952.0], [27.7, 5953.0], [27.8, 5960.0], [27.9, 5981.0], [28.0, 5981.0], [28.1, 5982.0], [28.2, 5987.0], [28.3, 5997.0], [28.4, 5998.0], [28.5, 6005.0], [28.6, 6010.0], [28.7, 6011.0], [28.8, 6015.0], [28.9, 6030.0], [29.0, 6032.0], [29.1, 6033.0], [29.2, 6048.0], [29.3, 6060.0], [29.4, 6070.0], [29.5, 6073.0], [29.6, 6076.0], [29.7, 6082.0], [29.8, 6089.0], [29.9, 6109.0], [30.0, 6118.0], [30.1, 6123.0], [30.2, 6130.0], [30.3, 6139.0], [30.4, 6139.0], [30.5, 6139.0], [30.6, 6146.0], [30.7, 6149.0], [30.8, 6156.0], [30.9, 6161.0], [31.0, 6169.0], [31.1, 6176.0], [31.2, 6186.0], [31.3, 6193.0], [31.4, 6200.0], [31.5, 6215.0], [31.6, 6225.0], [31.7, 6238.0], [31.8, 6247.0], [31.9, 6260.0], [32.0, 6286.0], [32.1, 6287.0], [32.2, 6300.0], [32.3, 6307.0], [32.4, 6313.0], [32.5, 6327.0], [32.6, 6335.0], [32.7, 6337.0], [32.8, 6345.0], [32.9, 6353.0], [33.0, 6364.0], [33.1, 6372.0], [33.2, 6380.0], [33.3, 6381.0], [33.4, 6383.0], [33.5, 6387.0], [33.6, 6392.0], [33.7, 6399.0], [33.8, 6402.0], [33.9, 6404.0], [34.0, 6460.0], [34.1, 6469.0], [34.2, 6487.0], [34.3, 6510.0], [34.4, 6510.0], [34.5, 6514.0], [34.6, 6534.0], [34.7, 6534.0], [34.8, 6548.0], [34.9, 6599.0], [35.0, 6615.0], [35.1, 6624.0], [35.2, 6639.0], [35.3, 6642.0], [35.4, 6662.0], [35.5, 6686.0], [35.6, 6699.0], [35.7, 6713.0], [35.8, 6722.0], [35.9, 6733.0], [36.0, 6739.0], [36.1, 6761.0], [36.2, 6768.0], [36.3, 6797.0], [36.4, 6799.0], [36.5, 6807.0], [36.6, 6821.0], [36.7, 6823.0], [36.8, 6879.0], [36.9, 6894.0], [37.0, 6906.0], [37.1, 6910.0], [37.2, 6916.0], [37.3, 6931.0], [37.4, 6940.0], [37.5, 6991.0], [37.6, 6996.0], [37.7, 6996.0], [37.8, 7011.0], [37.9, 7034.0], [38.0, 7039.0], [38.1, 7064.0], [38.2, 7081.0], [38.3, 7105.0], [38.4, 7123.0], [38.5, 7154.0], [38.6, 7164.0], [38.7, 7170.0], [38.8, 7209.0], [38.9, 7256.0], [39.0, 7257.0], [39.1, 7305.0], [39.2, 7326.0], [39.3, 7333.0], [39.4, 7341.0], [39.5, 7348.0], [39.6, 7361.0], [39.7, 7376.0], [39.8, 7390.0], [39.9, 7404.0], [40.0, 7408.0], [40.1, 7438.0], [40.2, 7446.0], [40.3, 7461.0], [40.4, 7465.0], [40.5, 7471.0], [40.6, 7482.0], [40.7, 7486.0], [40.8, 7500.0], [40.9, 7513.0], [41.0, 7524.0], [41.1, 7532.0], [41.2, 7567.0], [41.3, 7579.0], [41.4, 7596.0], [41.5, 7676.0], [41.6, 7692.0], [41.7, 7697.0], [41.8, 7705.0], [41.9, 7748.0], [42.0, 7753.0], [42.1, 7781.0], [42.2, 7826.0], [42.3, 7857.0], [42.4, 7858.0], [42.5, 7906.0], [42.6, 7980.0], [42.7, 7983.0], [42.8, 8012.0], [42.9, 8030.0], [43.0, 8042.0], [43.1, 8113.0], [43.2, 8147.0], [43.3, 8213.0], [43.4, 8224.0], [43.5, 8235.0], [43.6, 8283.0], [43.7, 8315.0], [43.8, 8358.0], [43.9, 8428.0], [44.0, 8475.0], [44.1, 8484.0], [44.2, 8565.0], [44.3, 8616.0], [44.4, 8618.0], [44.5, 8647.0], [44.6, 8655.0], [44.7, 8661.0], [44.8, 8702.0], [44.9, 8727.0], [45.0, 8742.0], [45.1, 8775.0], [45.2, 8784.0], [45.3, 8798.0], [45.4, 8814.0], [45.5, 8845.0], [45.6, 8887.0], [45.7, 8898.0], [45.8, 8902.0], [45.9, 8934.0], [46.0, 8949.0], [46.1, 8962.0], [46.2, 8992.0], [46.3, 9010.0], [46.4, 9044.0], [46.5, 9069.0], [46.6, 9085.0], [46.7, 9086.0], [46.8, 9097.0], [46.9, 9127.0], [47.0, 9130.0], [47.1, 9158.0], [47.2, 9186.0], [47.3, 9221.0], [47.4, 9242.0], [47.5, 9247.0], [47.6, 9288.0], [47.7, 9291.0], [47.8, 9301.0], [47.9, 9326.0], [48.0, 9334.0], [48.1, 9340.0], [48.2, 9355.0], [48.3, 9374.0], [48.4, 9383.0], [48.5, 9420.0], [48.6, 9440.0], [48.7, 9475.0], [48.8, 9494.0], [48.9, 9514.0], [49.0, 9523.0], [49.1, 9542.0], [49.2, 9544.0], [49.3, 9565.0], [49.4, 9568.0], [49.5, 9582.0], [49.6, 9592.0], [49.7, 9598.0], [49.8, 9609.0], [49.9, 9695.0], [50.0, 9700.0], [50.1, 9708.0], [50.2, 9756.0], [50.3, 9786.0], [50.4, 9802.0], [50.5, 10268.0], [50.6, 10288.0], [50.7, 10326.0], [50.8, 10402.0], [50.9, 10586.0], [51.0, 10611.0], [51.1, 10645.0], [51.2, 10726.0], [51.3, 10784.0], [51.4, 10919.0], [51.5, 11033.0], [51.6, 11222.0], [51.7, 11226.0], [51.8, 11277.0], [51.9, 11371.0], [52.0, 11380.0], [52.1, 11559.0], [52.2, 11564.0], [52.3, 11584.0], [52.4, 11717.0], [52.5, 11765.0], [52.6, 11852.0], [52.7, 11858.0], [52.8, 12084.0], [52.9, 12135.0], [53.0, 12140.0], [53.1, 12201.0], [53.2, 12216.0], [53.3, 12249.0], [53.4, 12251.0], [53.5, 12270.0], [53.6, 12276.0], [53.7, 12284.0], [53.8, 12287.0], [53.9, 12288.0], [54.0, 12290.0], [54.1, 12299.0], [54.2, 12306.0], [54.3, 12330.0], [54.4, 12332.0], [54.5, 12357.0], [54.6, 12371.0], [54.7, 12377.0], [54.8, 12387.0], [54.9, 12405.0], [55.0, 12416.0], [55.1, 12427.0], [55.2, 12444.0], [55.3, 12457.0], [55.4, 12457.0], [55.5, 12462.0], [55.6, 12466.0], [55.7, 12469.0], [55.8, 12475.0], [55.9, 12482.0], [56.0, 12487.0], [56.1, 12511.0], [56.2, 12531.0], [56.3, 12550.0], [56.4, 12557.0], [56.5, 12573.0], [56.6, 12582.0], [56.7, 12595.0], [56.8, 12603.0], [56.9, 12623.0], [57.0, 12625.0], [57.1, 12630.0], [57.2, 12634.0], [57.3, 12644.0], [57.4, 12652.0], [57.5, 12662.0], [57.6, 12671.0], [57.7, 12677.0], [57.8, 12690.0], [57.9, 12707.0], [58.0, 12713.0], [58.1, 12722.0], [58.2, 12733.0], [58.3, 12756.0], [58.4, 12763.0], [58.5, 12780.0], [58.6, 12798.0], [58.7, 12809.0], [58.8, 12826.0], [58.9, 12833.0], [59.0, 12835.0], [59.1, 12843.0], [59.2, 12844.0], [59.3, 12847.0], [59.4, 12848.0], [59.5, 12856.0], [59.6, 12861.0], [59.7, 12867.0], [59.8, 12870.0], [59.9, 12888.0], [60.0, 12893.0], [60.1, 12903.0], [60.2, 12911.0], [60.3, 12926.0], [60.4, 12928.0], [60.5, 12932.0], [60.6, 12934.0], [60.7, 12935.0], [60.8, 12943.0], [60.9, 12948.0], [61.0, 12950.0], [61.1, 12951.0], [61.2, 12966.0], [61.3, 12989.0], [61.4, 12989.0], [61.5, 13005.0], [61.6, 13010.0], [61.7, 13010.0], [61.8, 13019.0], [61.9, 13020.0], [62.0, 13036.0], [62.1, 13037.0], [62.2, 13047.0], [62.3, 13049.0], [62.4, 13059.0], [62.5, 13074.0], [62.6, 13088.0], [62.7, 13092.0], [62.8, 13101.0], [62.9, 13115.0], [63.0, 13116.0], [63.1, 13132.0], [63.2, 13151.0], [63.3, 13161.0], [63.4, 13161.0], [63.5, 13166.0], [63.6, 13167.0], [63.7, 13168.0], [63.8, 13170.0], [63.9, 13179.0], [64.0, 13179.0], [64.1, 13183.0], [64.2, 13184.0], [64.3, 13199.0], [64.4, 13206.0], [64.5, 13212.0], [64.6, 13224.0], [64.7, 13229.0], [64.8, 13233.0], [64.9, 13241.0], [65.0, 13241.0], [65.1, 13247.0], [65.2, 13250.0], [65.3, 13256.0], [65.4, 13264.0], [65.5, 13270.0], [65.6, 13309.0], [65.7, 13312.0], [65.8, 13318.0], [65.9, 13330.0], [66.0, 13331.0], [66.1, 13336.0], [66.2, 13338.0], [66.3, 13350.0], [66.4, 13351.0], [66.5, 13358.0], [66.6, 13374.0], [66.7, 13376.0], [66.8, 13391.0], [66.9, 13401.0], [67.0, 13402.0], [67.1, 13415.0], [67.2, 13424.0], [67.3, 13425.0], [67.4, 13445.0], [67.5, 13463.0], [67.6, 13482.0], [67.7, 13486.0], [67.8, 13490.0], [67.9, 13514.0], [68.0, 13531.0], [68.1, 13536.0], [68.2, 13541.0], [68.3, 13550.0], [68.4, 13552.0], [68.5, 13557.0], [68.6, 13558.0], [68.7, 13569.0], [68.8, 13577.0], [68.9, 13579.0], [69.0, 13581.0], [69.1, 13588.0], [69.2, 13592.0], [69.3, 13595.0], [69.4, 13595.0], [69.5, 13605.0], [69.6, 13608.0], [69.7, 13608.0], [69.8, 13620.0], [69.9, 13625.0], [70.0, 13629.0], [70.1, 13639.0], [70.2, 13656.0], [70.3, 13661.0], [70.4, 13662.0], [70.5, 13674.0], [70.6, 13685.0], [70.7, 13686.0], [70.8, 13689.0], [70.9, 13691.0], [71.0, 13693.0], [71.1, 13697.0], [71.2, 13706.0], [71.3, 13712.0], [71.4, 13716.0], [71.5, 13732.0], [71.6, 13734.0], [71.7, 13738.0], [71.8, 13745.0], [71.9, 13757.0], [72.0, 13760.0], [72.1, 13769.0], [72.2, 13775.0], [72.3, 13789.0], [72.4, 13799.0], [72.5, 13809.0], [72.6, 13818.0], [72.7, 13820.0], [72.8, 13841.0], [72.9, 13848.0], [73.0, 13848.0], [73.1, 13852.0], [73.2, 13872.0], [73.3, 13880.0], [73.4, 13885.0], [73.5, 13900.0], [73.6, 13909.0], [73.7, 13910.0], [73.8, 13923.0], [73.9, 13931.0], [74.0, 13932.0], [74.1, 13958.0], [74.2, 13967.0], [74.3, 13971.0], [74.4, 13974.0], [74.5, 13977.0], [74.6, 13990.0], [74.7, 13996.0], [74.8, 14002.0], [74.9, 14019.0], [75.0, 14020.0], [75.1, 14041.0], [75.2, 14048.0], [75.3, 14059.0], [75.4, 14066.0], [75.5, 14075.0], [75.6, 14091.0], [75.7, 14092.0], [75.8, 14099.0], [75.9, 14112.0], [76.0, 14119.0], [76.1, 14125.0], [76.2, 14128.0], [76.3, 14132.0], [76.4, 14135.0], [76.5, 14137.0], [76.6, 14149.0], [76.7, 14154.0], [76.8, 14166.0], [76.9, 14176.0], [77.0, 14181.0], [77.1, 14195.0], [77.2, 14200.0], [77.3, 14211.0], [77.4, 14215.0], [77.5, 14232.0], [77.6, 14234.0], [77.7, 14240.0], [77.8, 14256.0], [77.9, 14271.0], [78.0, 14277.0], [78.1, 14294.0], [78.2, 14315.0], [78.3, 14364.0], [78.4, 14375.0], [78.5, 14380.0], [78.6, 14389.0], [78.7, 14411.0], [78.8, 14449.0], [78.9, 14465.0], [79.0, 14467.0], [79.1, 14509.0], [79.2, 14538.0], [79.3, 14558.0], [79.4, 14563.0], [79.5, 14576.0], [79.6, 14584.0], [79.7, 14593.0], [79.8, 14596.0], [79.9, 14613.0], [80.0, 14621.0], [80.1, 14637.0], [80.2, 14666.0], [80.3, 14683.0], [80.4, 14692.0], [80.5, 14721.0], [80.6, 14790.0], [80.7, 14792.0], [80.8, 14814.0], [80.9, 14824.0], [81.0, 14883.0], [81.1, 14921.0], [81.2, 14986.0], [81.3, 15008.0], [81.4, 15024.0], [81.5, 15066.0], [81.6, 15074.0], [81.7, 15090.0], [81.8, 15117.0], [81.9, 15146.0], [82.0, 15153.0], [82.1, 15157.0], [82.2, 15182.0], [82.3, 15189.0], [82.4, 15191.0], [82.5, 15198.0], [82.6, 15207.0], [82.7, 15208.0], [82.8, 15211.0], [82.9, 15213.0], [83.0, 15214.0], [83.1, 15218.0], [83.2, 15219.0], [83.3, 15225.0], [83.4, 15226.0], [83.5, 15226.0], [83.6, 15228.0], [83.7, 15230.0], [83.8, 15237.0], [83.9, 15239.0], [84.0, 15241.0], [84.1, 15247.0], [84.2, 15252.0], [84.3, 15252.0], [84.4, 15253.0], [84.5, 15254.0], [84.6, 15270.0], [84.7, 15272.0], [84.8, 15281.0], [84.9, 15284.0], [85.0, 15295.0], [85.1, 15299.0], [85.2, 15303.0], [85.3, 15317.0], [85.4, 15328.0], [85.5, 15333.0], [85.6, 15339.0], [85.7, 15339.0], [85.8, 15343.0], [85.9, 15350.0], [86.0, 15350.0], [86.1, 15354.0], [86.2, 15363.0], [86.3, 15366.0], [86.4, 15370.0], [86.5, 15382.0], [86.6, 15384.0], [86.7, 15386.0], [86.8, 15389.0], [86.9, 15404.0], [87.0, 15407.0], [87.1, 15408.0], [87.2, 15410.0], [87.3, 15414.0], [87.4, 15415.0], [87.5, 15433.0], [87.6, 15452.0], [87.7, 15453.0], [87.8, 15459.0], [87.9, 15464.0], [88.0, 15464.0], [88.1, 15472.0], [88.2, 15473.0], [88.3, 15478.0], [88.4, 15480.0], [88.5, 15490.0], [88.6, 15492.0], [88.7, 15495.0], [88.8, 15502.0], [88.9, 15515.0], [89.0, 15521.0], [89.1, 15528.0], [89.2, 15538.0], [89.3, 15539.0], [89.4, 15540.0], [89.5, 15553.0], [89.6, 15554.0], [89.7, 15557.0], [89.8, 15563.0], [89.9, 15570.0], [90.0, 15572.0], [90.1, 15575.0], [90.2, 15587.0], [90.3, 15588.0], [90.4, 15594.0], [90.5, 15598.0], [90.6, 15611.0], [90.7, 15613.0], [90.8, 15616.0], [90.9, 15625.0], [91.0, 15629.0], [91.1, 15630.0], [91.2, 15638.0], [91.3, 15646.0], [91.4, 15653.0], [91.5, 15657.0], [91.6, 15659.0], [91.7, 15662.0], [91.8, 15679.0], [91.9, 15685.0], [92.0, 15691.0], [92.1, 15693.0], [92.2, 15700.0], [92.3, 15706.0], [92.4, 15706.0], [92.5, 15713.0], [92.6, 15725.0], [92.7, 15727.0], [92.8, 15743.0], [92.9, 15752.0], [93.0, 15757.0], [93.1, 15774.0], [93.2, 15782.0], [93.3, 15800.0], [93.4, 15800.0], [93.5, 15811.0], [93.6, 15819.0], [93.7, 15819.0], [93.8, 15835.0], [93.9, 15854.0], [94.0, 15860.0], [94.1, 15861.0], [94.2, 15864.0], [94.3, 15869.0], [94.4, 15877.0], [94.5, 15884.0], [94.6, 15889.0], [94.7, 15894.0], [94.8, 15902.0], [94.9, 15913.0], [95.0, 15914.0], [95.1, 15917.0], [95.2, 15922.0], [95.3, 15933.0], [95.4, 15934.0], [95.5, 15939.0], [95.6, 15944.0], [95.7, 15945.0], [95.8, 15947.0], [95.9, 15951.0], [96.0, 15953.0], [96.1, 15959.0], [96.2, 15961.0], [96.3, 15963.0], [96.4, 15971.0], [96.5, 15985.0], [96.6, 15992.0], [96.7, 15993.0], [96.8, 15998.0], [96.9, 16005.0], [97.0, 16006.0], [97.1, 16011.0], [97.2, 16015.0], [97.3, 16019.0], [97.4, 16023.0], [97.5, 16029.0], [97.6, 16033.0], [97.7, 16036.0], [97.8, 16037.0], [97.9, 16041.0], [98.0, 16048.0], [98.1, 16057.0], [98.2, 16059.0], [98.3, 16065.0], [98.4, 16066.0], [98.5, 16077.0], [98.6, 16096.0], [98.7, 16099.0], [98.8, 16110.0], [98.9, 16118.0], [99.0, 16123.0], [99.1, 16133.0], [99.2, 16137.0], [99.3, 16142.0], [99.4, 16145.0], [99.5, 16160.0], [99.6, 16171.0], [99.7, 16197.0], [99.8, 16224.0], [99.9, 16244.0], [100.0, 16431.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 44.0, "series": [{"data": [[300.0, 12.0], [400.0, 20.0], [500.0, 10.0], [600.0, 28.0], [700.0, 3.0], [800.0, 1.0], [900.0, 3.0], [1200.0, 1.0], [1300.0, 7.0], [1400.0, 10.0], [1500.0, 10.0], [1600.0, 7.0], [1700.0, 5.0], [1800.0, 2.0], [1900.0, 5.0], [2000.0, 7.0], [2100.0, 3.0], [2200.0, 9.0], [2300.0, 6.0], [2400.0, 9.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 6.0], [3000.0, 8.0], [3100.0, 10.0], [3200.0, 8.0], [3300.0, 7.0], [3400.0, 10.0], [3500.0, 12.0], [3600.0, 14.0], [3700.0, 13.0], [3800.0, 10.0], [3900.0, 12.0], [4000.0, 6.0], [4200.0, 4.0], [4100.0, 8.0], [4300.0, 6.0], [4400.0, 6.0], [4500.0, 3.0], [4600.0, 7.0], [4800.0, 5.0], [4700.0, 4.0], [4900.0, 3.0], [5000.0, 5.0], [5100.0, 7.0], [5200.0, 5.0], [5300.0, 11.0], [5400.0, 15.0], [5500.0, 19.0], [5600.0, 13.0], [5700.0, 17.0], [5800.0, 23.0], [5900.0, 27.0], [6000.0, 24.0], [6100.0, 26.0], [6200.0, 14.0], [6300.0, 26.0], [6400.0, 9.0], [6500.0, 12.0], [6600.0, 12.0], [6700.0, 13.0], [6800.0, 9.0], [6900.0, 13.0], [7000.0, 10.0], [7100.0, 8.0], [7200.0, 5.0], [7300.0, 13.0], [7400.0, 16.0], [7500.0, 11.0], [7600.0, 6.0], [7700.0, 7.0], [7800.0, 5.0], [7900.0, 5.0], [8000.0, 5.0], [8100.0, 4.0], [8200.0, 6.0], [8300.0, 4.0], [8400.0, 4.0], [8500.0, 3.0], [8600.0, 8.0], [8700.0, 10.0], [8800.0, 6.0], [8900.0, 9.0], [9100.0, 7.0], [9000.0, 10.0], [9200.0, 9.0], [9300.0, 12.0], [9400.0, 6.0], [9500.0, 15.0], [9700.0, 7.0], [9600.0, 4.0], [9800.0, 1.0], [10100.0, 1.0], [10200.0, 3.0], [10300.0, 2.0], [10400.0, 1.0], [10500.0, 2.0], [10600.0, 4.0], [10700.0, 3.0], [10900.0, 2.0], [11000.0, 2.0], [11200.0, 4.0], [11300.0, 3.0], [11400.0, 1.0], [11500.0, 5.0], [11700.0, 4.0], [11800.0, 2.0], [12100.0, 4.0], [12200.0, 18.0], [12000.0, 2.0], [12400.0, 20.0], [12500.0, 12.0], [12300.0, 13.0], [12700.0, 14.0], [12600.0, 18.0], [12900.0, 25.0], [12800.0, 23.0], [13200.0, 21.0], [13000.0, 22.0], [13300.0, 22.0], [13100.0, 27.0], [13400.0, 16.0], [13600.0, 30.0], [13500.0, 27.0], [13700.0, 21.0], [13800.0, 18.0], [13900.0, 22.0], [14000.0, 18.0], [14100.0, 23.0], [14200.0, 17.0], [14300.0, 8.0], [14400.0, 7.0], [14500.0, 13.0], [14700.0, 5.0], [14600.0, 10.0], [14800.0, 5.0], [14900.0, 5.0], [15000.0, 8.0], [15100.0, 13.0], [15200.0, 44.0], [15300.0, 30.0], [15400.0, 32.0], [15500.0, 30.0], [15600.0, 28.0], [15700.0, 19.0], [15800.0, 25.0], [15900.0, 36.0], [16200.0, 4.0], [16100.0, 17.0], [16000.0, 31.0], [16400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1605.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1605.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 77.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 174.5, "minX": 1.71699078E12, "maxY": 290.2744082840244, "series": [{"data": [[1.71699078E12, 290.2744082840244], [1.71699084E12, 174.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699084E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 476.0, "minX": 1.0, "maxY": 16431.0, "series": [{"data": [[2.0, 16151.0], [3.0, 16225.0], [4.0, 16197.0], [5.0, 16118.0], [6.0, 16160.0], [7.0, 16214.0], [8.0, 16170.0], [9.0, 16244.0], [10.0, 16171.0], [11.0, 16133.0], [12.0, 16145.0], [13.0, 16099.0], [14.0, 16126.0], [15.0, 16108.0], [16.0, 16123.0], [17.0, 16141.0], [18.0, 16115.0], [19.0, 16137.0], [20.0, 16059.0], [21.0, 16133.0], [22.0, 16110.0], [23.0, 16012.0], [24.0, 16080.0], [25.0, 16011.0], [26.0, 16077.0], [27.0, 16036.0], [28.0, 15922.0], [29.0, 16029.0], [30.0, 16065.0], [31.0, 16041.0], [33.0, 15987.0], [32.0, 16062.0], [35.0, 16029.0], [34.0, 16027.0], [37.0, 16048.0], [36.0, 16066.0], [39.0, 15998.0], [38.0, 15962.0], [41.0, 16057.0], [40.0, 16006.0], [43.0, 16038.0], [42.0, 16037.0], [45.0, 16019.0], [44.0, 16033.0], [46.0, 4963.0], [47.0, 8697.0], [48.0, 5001.0], [49.0, 6251.666666666667], [51.0, 4396.2], [50.0, 8683.5], [52.0, 5073.5], [53.0, 8709.5], [54.0, 6379.333333333333], [55.0, 8710.5], [57.0, 5230.75], [56.0, 6371.333333333333], [58.0, 6292.0], [59.0, 4432.4], [60.0, 8839.5], [61.0, 8796.0], [62.0, 6337.333333333333], [63.0, 6405.666666666667], [64.0, 5313.75], [65.0, 8830.0], [67.0, 8896.0], [66.0, 15925.0], [68.0, 6608.0], [69.0, 5460.75], [71.0, 6612.0], [70.0, 15884.0], [72.0, 3507.2], [73.0, 8948.5], [75.0, 15757.0], [74.0, 15782.0], [78.0, 5599.5], [79.0, 6761.333333333333], [77.0, 15774.0], [76.0, 15743.0], [80.0, 9013.0], [82.0, 5000.2], [81.0, 9011.0], [83.0, 9099.5], [84.0, 9021.0], [85.0, 5762.5], [86.0, 4360.428571428572], [87.0, 6918.0], [90.0, 6910.333333333333], [89.0, 6919.333333333333], [91.0, 15625.0], [88.0, 15634.0], [92.0, 5898.0], [93.0, 9226.0], [94.0, 9147.5], [95.0, 7027.0], [96.0, 9166.5], [98.0, 7087.333333333333], [99.0, 7096.666666666667], [97.0, 15630.0], [100.0, 7084.666666666667], [101.0, 7147.0], [103.0, 9258.0], [102.0, 9210.0], [104.0, 7226.0], [106.0, 5565.6], [107.0, 9276.0], [105.0, 15539.0], [108.0, 5594.0], [109.0, 9295.0], [110.0, 9393.5], [111.0, 9331.0], [112.0, 5693.6], [113.0, 7210.0], [115.0, 5580.6], [114.0, 7199.0], [117.0, 9329.0], [116.0, 7361.666666666666], [119.0, 4355.384615384615], [118.0, 5844.4], [120.0, 9389.5], [121.0, 9459.5], [123.0, 5930.2], [122.0, 15353.0], [124.0, 5274.142857142857], [125.0, 6515.25], [126.0, 6001.0], [127.0, 5628.833333333333], [128.0, 6049.4], [129.0, 5663.666666666667], [130.0, 6687.0], [131.0, 7670.666666666666], [132.0, 6689.75], [133.0, 6713.25], [134.0, 6212.4], [135.0, 5810.166666666666], [137.0, 6241.0], [138.0, 6236.0], [140.0, 7805.666666666666], [139.0, 9692.0], [141.0, 6830.25], [143.0, 6019.833333333334], [142.0, 7825.0], [136.0, 15283.0], [146.0, 7917.0], [145.0, 9684.5], [149.0, 7048.5], [150.0, 7041.0], [151.0, 7973.0], [148.0, 15225.0], [147.0, 15243.0], [144.0, 15303.0], [152.0, 9818.5], [153.0, 8029.333333333334], [154.0, 9852.5], [156.0, 9869.5], [155.0, 8036.0], [159.0, 6730.8], [158.0, 15219.0], [157.0, 15276.0], [160.0, 9915.0], [161.0, 9916.5], [162.0, 8237.666666666666], [163.0, 9954.0], [165.0, 8249.0], [164.0, 10005.5], [167.0, 10002.5], [166.0, 15186.0], [168.0, 6948.0], [169.0, 9976.5], [172.0, 10068.0], [171.0, 10111.5], [170.0, 10102.0], [173.0, 8394.0], [175.0, 8463.666666666666], [174.0, 15213.0], [176.0, 8447.333333333334], [178.0, 10177.0], [177.0, 8485.666666666666], [179.0, 6239.599999999999], [183.0, 15339.0], [182.0, 15317.0], [181.0, 15295.0], [180.0, 15236.0], [185.0, 8678.666666666666], [184.0, 8640.666666666666], [186.0, 6808.142857142857], [187.0, 10367.5], [188.0, 10377.0], [190.0, 6166.466666666666], [191.0, 6915.857142857142], [189.0, 7430.4], [192.0, 7540.8], [193.0, 8853.666666666666], [194.0, 7003.0], [195.0, 8942.333333333334], [196.0, 7604.6], [199.0, 6842.777777777777], [198.0, 7142.0], [197.0, 8159.0], [201.0, 7432.666666666666], [200.0, 6870.999999999999], [202.0, 7794.4], [203.0, 7508.166666666666], [204.0, 7512.833333333334], [205.0, 7824.0], [207.0, 6593.562500000001], [206.0, 8388.5], [208.0, 7201.75], [209.0, 7998.0], [210.0, 7014.4], [211.0, 7281.75], [212.0, 7311.25], [213.0, 8536.75], [214.0, 7178.666666666667], [215.0, 6812.076923076923], [216.0, 9431.333333333334], [217.0, 7556.142857142857], [218.0, 7354.555555555555], [219.0, 7272.1], [220.0, 7946.0], [222.0, 7968.833333333333], [221.0, 7561.25], [223.0, 8298.4], [225.0, 8352.6], [224.0, 8824.0], [226.0, 9647.0], [227.0, 8918.0], [228.0, 11251.5], [229.0, 8189.5], [230.0, 8980.5], [231.0, 11354.5], [232.0, 8564.4], [234.0, 7801.444444444444], [233.0, 9817.666666666666], [235.0, 9072.25], [236.0, 8685.4], [237.0, 9917.333333333334], [239.0, 8437.833333333332], [238.0, 11487.5], [240.0, 9946.666666666666], [241.0, 9238.75], [242.0, 8527.333333333332], [243.0, 8808.8], [246.0, 9338.25], [245.0, 8874.8], [244.0, 11489.0], [247.0, 9402.25], [249.0, 11560.5], [248.0, 11597.0], [250.0, 11571.5], [254.0, 9466.25], [253.0, 9475.25], [252.0, 9459.0], [251.0, 11589.5], [255.0, 9062.6], [259.0, 9111.4], [256.0, 8837.5], [257.0, 9127.6], [258.0, 7926.739130434783], [260.0, 11692.0], [262.0, 15951.0], [261.0, 15816.0], [263.0, 15829.0], [268.0, 10398.333333333334], [269.0, 9720.0], [271.0, 8963.142857142857], [267.0, 15864.0], [266.0, 15864.0], [265.0, 15712.0], [264.0, 15902.0], [270.0, 15482.0], [274.0, 9911.5], [275.0, 11788.5], [277.0, 10508.333333333334], [276.0, 10547.666666666666], [279.0, 11708.5], [273.0, 15629.0], [272.0, 15706.0], [278.0, 11816.0], [280.0, 11806.0], [281.0, 10609.333333333334], [283.0, 15513.0], [282.0, 15480.0], [284.0, 10032.5], [285.0, 10031.0], [286.0, 11834.5], [287.0, 11912.5], [300.0, 10005.8], [290.0, 11861.5], [288.0, 11895.5], [289.0, 15382.0], [295.0, 15328.0], [291.0, 10700.333333333334], [294.0, 9634.5], [293.0, 11899.0], [292.0, 15433.0], [297.0, 10856.666666666666], [298.0, 11891.0], [299.0, 15207.0], [301.0, 9781.0], [302.0, 10908.333333333334], [303.0, 10420.0], [296.0, 15228.0], [305.0, 10975.666666666666], [304.0, 10916.666666666666], [307.0, 10136.6], [306.0, 15230.0], [316.0, 11082.666666666666], [317.0, 10640.5], [318.0, 10657.25], [319.0, 12183.5], [309.0, 10980.0], [308.0, 10992.333333333334], [313.0, 9640.7], [314.0, 11094.0], [315.0, 15067.0], [312.0, 10565.75], [311.0, 12093.5], [310.0, 12049.0], [321.0, 11134.333333333334], [320.0, 10700.5], [322.0, 10723.5], [324.0, 10456.0], [323.0, 10243.333333333334], [325.0, 11283.666666666666], [326.0, 10798.5], [327.0, 14815.0], [329.0, 10903.25], [332.0, 12082.5], [333.0, 14634.0], [334.0, 10911.25], [335.0, 14803.0], [328.0, 12083.5], [330.0, 10216.625], [331.0, 10318.857142857143], [349.0, 12358.0], [337.0, 12189.0], [336.0, 10743.0], [343.0, 14659.0], [342.0, 14611.0], [341.0, 14596.0], [340.0, 14621.0], [339.0, 11362.333333333334], [338.0, 14721.0], [351.0, 14509.0], [350.0, 14546.0], [348.0, 14637.0], [347.0, 14584.0], [346.0, 14563.0], [345.0, 14576.0], [344.0, 14571.0], [365.0, 12452.5], [354.0, 11717.333333333334], [353.0, 14613.0], [352.0, 14558.0], [357.0, 12381.5], [356.0, 14460.0], [358.0, 14513.0], [359.0, 12437.5], [366.0, 12456.0], [367.0, 14375.0], [364.0, 14414.0], [355.0, 14700.0], [363.0, 14449.0], [362.0, 14287.0], [361.0, 14465.0], [360.0, 14467.0], [381.0, 12614.0], [369.0, 12353.0], [370.0, 14364.0], [368.0, 12489.0], [372.0, 12296.0], [373.0, 14129.0], [375.0, 14233.0], [374.0, 14295.0], [378.0, 12579.5], [379.0, 14411.0], [377.0, 12612.0], [383.0, 14190.0], [376.0, 14200.0], [382.0, 14224.0], [380.0, 14232.0], [371.0, 14379.0], [385.0, 12746.0], [386.0, 12237.0], [389.0, 12172.8], [388.0, 11122.833333333334], [390.0, 12058.0], [387.0, 12462.5], [392.0, 12122.75], [399.0, 572.0], [398.0, 14137.0], [397.0, 14138.0], [396.0, 14271.0], [391.0, 12946.0], [384.0, 14259.0], [394.0, 12845.0], [393.0, 14211.0], [395.0, 14132.0], [412.0, 12610.770833333332], [401.0, 12599.666666666666], [402.0, 12959.0], [403.0, 7394.0], [406.0, 9479.999999999998], [405.0, 7245.0], [404.0, 7304.0], [407.0, 6451.519999999999], [400.0, 14099.0], [415.0, 12265.5], [409.0, 10333.944444444442], [408.0, 8524.617647058825], [414.0, 9732.25], [413.0, 10636.238095238095], [411.0, 11556.833333333336], [410.0, 10852.883720930235], [430.0, 8648.666666666666], [418.0, 12310.0], [419.0, 12135.0], [417.0, 12336.0], [422.0, 8616.333333333334], [421.0, 12216.0], [420.0, 476.0], [423.0, 641.0], [416.0, 12314.5], [425.0, 6546.0], [426.0, 12542.0], [427.0, 6657.0], [431.0, 12524.333333333334], [424.0, 931.0], [429.0, 12471.0], [428.0, 12427.0], [447.0, 12688.0], [432.0, 12451.75], [440.0, 12161.0], [439.0, 12601.333333333334], [438.0, 12943.0], [437.0, 13243.333333333334], [441.0, 12715.555555555555], [442.0, 12416.4], [444.0, 12840.0], [435.0, 12792.0], [434.0, 13206.0], [433.0, 12690.0], [443.0, 12764.666666666666], [446.0, 12691.333333333334], [445.0, 13092.0], [448.0, 12901.888888888889], [451.0, 12989.599999999999], [452.0, 13207.272727272726], [453.0, 13151.705882352942], [454.0, 13080.666666666666], [456.0, 13124.166666666666], [460.0, 13463.0], [457.0, 13090.909090909092], [458.0, 13153.428571428572], [459.0, 13191.0], [455.0, 13050.846153846156], [450.0, 12913.5], [449.0, 13114.333333333334], [1.0, 16431.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[266.5747058823531, 9658.89352941176]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 460.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 690.2, "minX": 1.71699078E12, "maxY": 2742982.566666667, "series": [{"data": [[1.71699078E12, 2742982.566666667], [1.71699084E12, 748101.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71699078E12, 2612.05], [1.71699084E12, 690.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699084E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8141.6945266272205, "minX": 1.71699078E12, "maxY": 15553.298850574707, "series": [{"data": [[1.71699078E12, 8141.6945266272205], [1.71699084E12, 15553.298850574707]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699084E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7528.98372781065, "minX": 1.71699078E12, "maxY": 15156.75574712644, "series": [{"data": [[1.71699078E12, 7528.98372781065], [1.71699084E12, 15156.75574712644]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699084E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 498.3542899408286, "minX": 1.71699078E12, "maxY": 586.0574712643679, "series": [{"data": [[1.71699078E12, 498.3542899408286], [1.71699084E12, 586.0574712643679]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699084E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1242.0, "minX": 1.71699078E12, "maxY": 16431.0, "series": [{"data": [[1.71699078E12, 14700.0], [1.71699084E12, 16431.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71699078E12, 1242.0], [1.71699084E12, 14563.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71699078E12, 13765.400000000001], [1.71699084E12, 16048.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71699078E12, 14451.64], [1.71699084E12, 16224.51]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71699078E12, 7755.0], [1.71699084E12, 15560.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71699078E12, 14100.2], [1.71699084E12, 16124.65]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699084E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 458.0, "minX": 1.0, "maxY": 16431.0, "series": [{"data": [[33.0, 12401.5], [32.0, 14195.0], [34.0, 13175.0], [36.0, 13629.0], [38.0, 12734.0], [39.0, 13892.0], [41.0, 13170.0], [77.0, 12629.5], [6.0, 1343.0], [9.0, 10374.0], [10.0, 12327.5], [12.0, 10951.5], [16.0, 11563.0], [1.0, 16431.0], [18.0, 8246.5], [20.0, 8271.0], [21.0, 4325.0], [22.0, 7701.5], [23.0, 8018.5], [24.0, 14926.5], [25.0, 15472.0], [26.0, 15663.5], [27.0, 6713.0], [28.0, 6103.5], [29.0, 6861.5], [30.0, 6089.0], [31.0, 6150.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 613.0], [32.0, 572.0], [36.0, 458.0], [77.0, 641.0], [38.0, 592.5], [39.0, 610.0], [30.0, 586.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 15817.0, "series": [{"data": [[33.0, 12005.0], [32.0, 13797.0], [34.0, 10465.0], [36.0, 13257.0], [38.0, 12342.0], [39.0, 13499.0], [41.0, 11173.0], [77.0, 11752.5], [6.0, 944.0], [9.0, 9456.0], [10.0, 9924.0], [12.0, 9723.5], [16.0, 9842.5], [1.0, 15817.0], [18.0, 7168.0], [20.0, 7903.0], [21.0, 3943.0], [22.0, 7298.0], [23.0, 7614.5], [24.0, 14520.5], [25.0, 15069.0], [26.0, 15260.0], [27.0, 6325.0], [28.0, 5700.0], [29.0, 6463.5], [30.0, 5683.0], [31.0, 5755.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 612.0], [32.0, 571.0], [36.0, 0.0], [77.0, 0.0], [38.0, 592.5], [39.0, 610.0], [30.0, 586.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.333333333333332, "minX": 1.71699078E12, "maxY": 28.333333333333332, "series": [{"data": [[1.71699078E12, 28.333333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699078E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.71699078E12, "maxY": 21.25, "series": [{"data": [[1.71699078E12, 21.25], [1.71699084E12, 5.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71699078E12, 0.5833333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.71699078E12, 0.7]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699084E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.71699078E12, "maxY": 21.25, "series": [{"data": [[1.71699078E12, 21.25], [1.71699084E12, 5.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71699078E12, 1.2833333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699084E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.71699078E12, "maxY": 21.25, "series": [{"data": [[1.71699078E12, 21.25], [1.71699084E12, 5.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71699078E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699084E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

