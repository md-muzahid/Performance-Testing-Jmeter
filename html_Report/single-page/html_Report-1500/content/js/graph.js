/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1216.0, "minX": 0.0, "maxY": 27119.0, "series": [{"data": [[0.0, 1216.0], [0.1, 1223.0], [0.2, 1255.0], [0.3, 1274.0], [0.4, 1286.0], [0.5, 1286.0], [0.6, 1296.0], [0.7, 1315.0], [0.8, 1323.0], [0.9, 1325.0], [1.0, 1334.0], [1.1, 1341.0], [1.2, 1347.0], [1.3, 1354.0], [1.4, 1357.0], [1.5, 1358.0], [1.6, 1361.0], [1.7, 1363.0], [1.8, 1368.0], [1.9, 1370.0], [2.0, 1374.0], [2.1, 1379.0], [2.2, 1383.0], [2.3, 1383.0], [2.4, 1383.0], [2.5, 1384.0], [2.6, 1388.0], [2.7, 1393.0], [2.8, 1394.0], [2.9, 1396.0], [3.0, 1397.0], [3.1, 1403.0], [3.2, 1405.0], [3.3, 1408.0], [3.4, 1410.0], [3.5, 1414.0], [3.6, 1415.0], [3.7, 1424.0], [3.8, 1424.0], [3.9, 1425.0], [4.0, 1428.0], [4.1, 1432.0], [4.2, 1434.0], [4.3, 1437.0], [4.4, 1437.0], [4.5, 1445.0], [4.6, 1449.0], [4.7, 1453.0], [4.8, 1453.0], [4.9, 1455.0], [5.0, 1456.0], [5.1, 1467.0], [5.2, 1469.0], [5.3, 1474.0], [5.4, 1474.0], [5.5, 1477.0], [5.6, 1478.0], [5.7, 1482.0], [5.8, 1484.0], [5.9, 1486.0], [6.0, 1488.0], [6.1, 1493.0], [6.2, 1493.0], [6.3, 1496.0], [6.4, 1499.0], [6.5, 1500.0], [6.6, 1504.0], [6.7, 1507.0], [6.8, 1511.0], [6.9, 1513.0], [7.0, 1518.0], [7.1, 1519.0], [7.2, 1524.0], [7.3, 1524.0], [7.4, 1526.0], [7.5, 1529.0], [7.6, 1531.0], [7.7, 1532.0], [7.8, 1533.0], [7.9, 1536.0], [8.0, 1538.0], [8.1, 1539.0], [8.2, 1540.0], [8.3, 1541.0], [8.4, 1542.0], [8.5, 1543.0], [8.6, 1544.0], [8.7, 1546.0], [8.8, 1549.0], [8.9, 1551.0], [9.0, 1556.0], [9.1, 1556.0], [9.2, 1559.0], [9.3, 1564.0], [9.4, 1565.0], [9.5, 1572.0], [9.6, 1576.0], [9.7, 1580.0], [9.8, 1585.0], [9.9, 1593.0], [10.0, 1595.0], [10.1, 1596.0], [10.2, 1598.0], [10.3, 1598.0], [10.4, 1600.0], [10.5, 1603.0], [10.6, 1613.0], [10.7, 1616.0], [10.8, 1620.0], [10.9, 1621.0], [11.0, 1624.0], [11.1, 1624.0], [11.2, 1629.0], [11.3, 1630.0], [11.4, 1633.0], [11.5, 1635.0], [11.6, 1638.0], [11.7, 1644.0], [11.8, 1646.0], [11.9, 1652.0], [12.0, 1659.0], [12.1, 1665.0], [12.2, 1673.0], [12.3, 1679.0], [12.4, 1715.0], [12.5, 1719.0], [12.6, 1741.0], [12.7, 1750.0], [12.8, 1766.0], [12.9, 1767.0], [13.0, 1790.0], [13.1, 1792.0], [13.2, 1796.0], [13.3, 1806.0], [13.4, 1836.0], [13.5, 1843.0], [13.6, 1854.0], [13.7, 1863.0], [13.8, 1886.0], [13.9, 1888.0], [14.0, 1932.0], [14.1, 1951.0], [14.2, 1968.0], [14.3, 2003.0], [14.4, 2026.0], [14.5, 2027.0], [14.6, 2078.0], [14.7, 2079.0], [14.8, 2122.0], [14.9, 2170.0], [15.0, 2175.0], [15.1, 2175.0], [15.2, 2181.0], [15.3, 2188.0], [15.4, 2191.0], [15.5, 2193.0], [15.6, 2197.0], [15.7, 2208.0], [15.8, 2225.0], [15.9, 2229.0], [16.0, 2234.0], [16.1, 2238.0], [16.2, 2240.0], [16.3, 2244.0], [16.4, 2262.0], [16.5, 2266.0], [16.6, 2276.0], [16.7, 2280.0], [16.8, 2304.0], [16.9, 2312.0], [17.0, 2350.0], [17.1, 2355.0], [17.2, 2421.0], [17.3, 2450.0], [17.4, 2465.0], [17.5, 2465.0], [17.6, 2500.0], [17.7, 2505.0], [17.8, 2525.0], [17.9, 2532.0], [18.0, 2573.0], [18.1, 2582.0], [18.2, 2587.0], [18.3, 2646.0], [18.4, 2649.0], [18.5, 2665.0], [18.6, 2679.0], [18.7, 2692.0], [18.8, 2730.0], [18.9, 2742.0], [19.0, 2768.0], [19.1, 2792.0], [19.2, 2835.0], [19.3, 2842.0], [19.4, 2853.0], [19.5, 2878.0], [19.6, 2942.0], [19.7, 2958.0], [19.8, 2978.0], [19.9, 2992.0], [20.0, 3001.0], [20.1, 3004.0], [20.2, 3019.0], [20.3, 3021.0], [20.4, 3048.0], [20.5, 3060.0], [20.6, 3061.0], [20.7, 3067.0], [20.8, 3075.0], [20.9, 3079.0], [21.0, 3081.0], [21.1, 3092.0], [21.2, 3104.0], [21.3, 3104.0], [21.4, 3115.0], [21.5, 3116.0], [21.6, 3119.0], [21.7, 3119.0], [21.8, 3122.0], [21.9, 3122.0], [22.0, 3124.0], [22.1, 3125.0], [22.2, 3130.0], [22.3, 3131.0], [22.4, 3137.0], [22.5, 3139.0], [22.6, 3152.0], [22.7, 3155.0], [22.8, 3157.0], [22.9, 3159.0], [23.0, 3167.0], [23.1, 3167.0], [23.2, 3170.0], [23.3, 3176.0], [23.4, 3179.0], [23.5, 3181.0], [23.6, 3186.0], [23.7, 3191.0], [23.8, 3196.0], [23.9, 3198.0], [24.0, 3205.0], [24.1, 3206.0], [24.2, 3209.0], [24.3, 3214.0], [24.4, 3217.0], [24.5, 3219.0], [24.6, 3220.0], [24.7, 3222.0], [24.8, 3224.0], [24.9, 3225.0], [25.0, 3228.0], [25.1, 3228.0], [25.2, 3230.0], [25.3, 3234.0], [25.4, 3238.0], [25.5, 3245.0], [25.6, 3251.0], [25.7, 3256.0], [25.8, 3265.0], [25.9, 3265.0], [26.0, 3269.0], [26.1, 3270.0], [26.2, 3274.0], [26.3, 3274.0], [26.4, 3277.0], [26.5, 3277.0], [26.6, 3280.0], [26.7, 3282.0], [26.8, 3291.0], [26.9, 3294.0], [27.0, 3298.0], [27.1, 3300.0], [27.2, 3302.0], [27.3, 3308.0], [27.4, 3312.0], [27.5, 3315.0], [27.6, 3327.0], [27.7, 3328.0], [27.8, 3351.0], [27.9, 3414.0], [28.0, 3431.0], [28.1, 3443.0], [28.2, 3529.0], [28.3, 3532.0], [28.4, 3576.0], [28.5, 3587.0], [28.6, 3599.0], [28.7, 3614.0], [28.8, 3627.0], [28.9, 3627.0], [29.0, 3647.0], [29.1, 3652.0], [29.2, 3679.0], [29.3, 3697.0], [29.4, 3732.0], [29.5, 3736.0], [29.6, 3800.0], [29.7, 3814.0], [29.8, 3854.0], [29.9, 3855.0], [30.0, 3885.0], [30.1, 3892.0], [30.2, 3905.0], [30.3, 3931.0], [30.4, 3944.0], [30.5, 3955.0], [30.6, 3966.0], [30.7, 3977.0], [30.8, 3980.0], [30.9, 3985.0], [31.0, 3998.0], [31.1, 4005.0], [31.2, 4005.0], [31.3, 4016.0], [31.4, 4027.0], [31.5, 4045.0], [31.6, 4045.0], [31.7, 4047.0], [31.8, 4060.0], [31.9, 4062.0], [32.0, 4074.0], [32.1, 4078.0], [32.2, 4104.0], [32.3, 4104.0], [32.4, 4121.0], [32.5, 4131.0], [32.6, 4147.0], [32.7, 4154.0], [32.8, 4166.0], [32.9, 4170.0], [33.0, 4193.0], [33.1, 4196.0], [33.2, 4264.0], [33.3, 4264.0], [33.4, 4329.0], [33.5, 4347.0], [33.6, 4356.0], [33.7, 4362.0], [33.8, 4376.0], [33.9, 4399.0], [34.0, 4416.0], [34.1, 4419.0], [34.2, 4422.0], [34.3, 4434.0], [34.4, 4434.0], [34.5, 4454.0], [34.6, 4458.0], [34.7, 4463.0], [34.8, 4471.0], [34.9, 4493.0], [35.0, 4500.0], [35.1, 4502.0], [35.2, 4512.0], [35.3, 4516.0], [35.4, 4520.0], [35.5, 4528.0], [35.6, 4530.0], [35.7, 4542.0], [35.8, 4545.0], [35.9, 4551.0], [36.0, 4551.0], [36.1, 4555.0], [36.2, 4559.0], [36.3, 4563.0], [36.4, 4565.0], [36.5, 4570.0], [36.6, 4578.0], [36.7, 4594.0], [36.8, 4594.0], [36.9, 4609.0], [37.0, 4610.0], [37.1, 4617.0], [37.2, 4629.0], [37.3, 4636.0], [37.4, 4640.0], [37.5, 4664.0], [37.6, 4666.0], [37.7, 4675.0], [37.8, 4685.0], [37.9, 4693.0], [38.0, 4700.0], [38.1, 4709.0], [38.2, 4716.0], [38.3, 4723.0], [38.4, 4728.0], [38.5, 4735.0], [38.6, 4744.0], [38.7, 4750.0], [38.8, 4763.0], [38.9, 4782.0], [39.0, 4787.0], [39.1, 4798.0], [39.2, 4813.0], [39.3, 4845.0], [39.4, 4852.0], [39.5, 4855.0], [39.6, 4860.0], [39.7, 4878.0], [39.8, 4885.0], [39.9, 4897.0], [40.0, 4897.0], [40.1, 4923.0], [40.2, 4929.0], [40.3, 4986.0], [40.4, 5004.0], [40.5, 5029.0], [40.6, 5039.0], [40.7, 5088.0], [40.8, 5091.0], [40.9, 5110.0], [41.0, 5136.0], [41.1, 5146.0], [41.2, 5171.0], [41.3, 5177.0], [41.4, 5191.0], [41.5, 5207.0], [41.6, 5212.0], [41.7, 5216.0], [41.8, 5216.0], [41.9, 5219.0], [42.0, 5222.0], [42.1, 5235.0], [42.2, 5238.0], [42.3, 5246.0], [42.4, 5252.0], [42.5, 5265.0], [42.6, 5268.0], [42.7, 5275.0], [42.8, 5278.0], [42.9, 5286.0], [43.0, 5289.0], [43.1, 5310.0], [43.2, 5312.0], [43.3, 5319.0], [43.4, 5323.0], [43.5, 5327.0], [43.6, 5359.0], [43.7, 5392.0], [43.8, 5413.0], [43.9, 5429.0], [44.0, 5431.0], [44.1, 5473.0], [44.2, 5483.0], [44.3, 5502.0], [44.4, 5512.0], [44.5, 5547.0], [44.6, 5560.0], [44.7, 5627.0], [44.8, 5636.0], [44.9, 5659.0], [45.0, 5660.0], [45.1, 5696.0], [45.2, 5708.0], [45.3, 5719.0], [45.4, 5720.0], [45.5, 5745.0], [45.6, 5756.0], [45.7, 5766.0], [45.8, 5776.0], [45.9, 5792.0], [46.0, 5804.0], [46.1, 5832.0], [46.2, 5832.0], [46.3, 5850.0], [46.4, 5866.0], [46.5, 5872.0], [46.6, 5876.0], [46.7, 5880.0], [46.8, 5883.0], [46.9, 5888.0], [47.0, 5918.0], [47.1, 5926.0], [47.2, 5930.0], [47.3, 5963.0], [47.4, 5966.0], [47.5, 6014.0], [47.6, 6018.0], [47.7, 6036.0], [47.8, 6046.0], [47.9, 6051.0], [48.0, 6052.0], [48.1, 6068.0], [48.2, 6086.0], [48.3, 6099.0], [48.4, 6107.0], [48.5, 6116.0], [48.6, 6136.0], [48.7, 6180.0], [48.8, 6192.0], [48.9, 6235.0], [49.0, 6240.0], [49.1, 6242.0], [49.2, 6248.0], [49.3, 6254.0], [49.4, 6261.0], [49.5, 6266.0], [49.6, 6266.0], [49.7, 6272.0], [49.8, 6275.0], [49.9, 6279.0], [50.0, 6282.0], [50.1, 6288.0], [50.2, 6289.0], [50.3, 6294.0], [50.4, 6298.0], [50.5, 6305.0], [50.6, 6305.0], [50.7, 6311.0], [50.8, 6314.0], [50.9, 6319.0], [51.0, 6320.0], [51.1, 6323.0], [51.2, 6325.0], [51.3, 6327.0], [51.4, 6334.0], [51.5, 6338.0], [51.6, 6339.0], [51.7, 6346.0], [51.8, 6347.0], [51.9, 6355.0], [52.0, 6357.0], [52.1, 6365.0], [52.2, 6372.0], [52.3, 6377.0], [52.4, 6382.0], [52.5, 6384.0], [52.6, 6385.0], [52.7, 6399.0], [52.8, 6406.0], [52.9, 6412.0], [53.0, 6418.0], [53.1, 6421.0], [53.2, 6421.0], [53.3, 6427.0], [53.4, 6429.0], [53.5, 6434.0], [53.6, 6435.0], [53.7, 6440.0], [53.8, 6442.0], [53.9, 6443.0], [54.0, 6445.0], [54.1, 6447.0], [54.2, 6449.0], [54.3, 6451.0], [54.4, 6456.0], [54.5, 6459.0], [54.6, 6461.0], [54.7, 6463.0], [54.8, 6464.0], [54.9, 6466.0], [55.0, 6467.0], [55.1, 6472.0], [55.2, 6473.0], [55.3, 6476.0], [55.4, 6480.0], [55.5, 6484.0], [55.6, 6484.0], [55.7, 6485.0], [55.8, 6485.0], [55.9, 6488.0], [56.0, 6492.0], [56.1, 6493.0], [56.2, 6496.0], [56.3, 6496.0], [56.4, 6498.0], [56.5, 6501.0], [56.6, 6502.0], [56.7, 6504.0], [56.8, 6505.0], [56.9, 6512.0], [57.0, 6513.0], [57.1, 6514.0], [57.2, 6514.0], [57.3, 6524.0], [57.4, 6529.0], [57.5, 6545.0], [57.6, 6548.0], [57.7, 6557.0], [57.8, 6557.0], [57.9, 6563.0], [58.0, 6566.0], [58.1, 6570.0], [58.2, 6575.0], [58.3, 6580.0], [58.4, 6586.0], [58.5, 6593.0], [58.6, 6597.0], [58.7, 6598.0], [58.8, 6599.0], [58.9, 6615.0], [59.0, 6615.0], [59.1, 6620.0], [59.2, 6623.0], [59.3, 6633.0], [59.4, 6634.0], [59.5, 6636.0], [59.6, 6636.0], [59.7, 6641.0], [59.8, 6649.0], [59.9, 6659.0], [60.0, 6660.0], [60.1, 6667.0], [60.2, 6669.0], [60.3, 6673.0], [60.4, 6678.0], [60.5, 6689.0], [60.6, 6698.0], [60.7, 6714.0], [60.8, 6718.0], [60.9, 6725.0], [61.0, 6735.0], [61.1, 6740.0], [61.2, 6741.0], [61.3, 6754.0], [61.4, 6760.0], [61.5, 6771.0], [61.6, 6771.0], [61.7, 6772.0], [61.8, 6774.0], [61.9, 6775.0], [62.0, 6775.0], [62.1, 6780.0], [62.2, 6784.0], [62.3, 6789.0], [62.4, 6792.0], [62.5, 6797.0], [62.6, 6797.0], [62.7, 6798.0], [62.8, 6799.0], [62.9, 6802.0], [63.0, 6804.0], [63.1, 6809.0], [63.2, 6812.0], [63.3, 6815.0], [63.4, 6816.0], [63.5, 6818.0], [63.6, 6818.0], [63.7, 6820.0], [63.8, 6820.0], [63.9, 6821.0], [64.0, 6822.0], [64.1, 6826.0], [64.2, 6826.0], [64.3, 6828.0], [64.4, 6831.0], [64.5, 6834.0], [64.6, 6835.0], [64.7, 6837.0], [64.8, 6838.0], [64.9, 6840.0], [65.0, 6840.0], [65.1, 6846.0], [65.2, 6851.0], [65.3, 6854.0], [65.4, 6855.0], [65.5, 6857.0], [65.6, 6858.0], [65.7, 6859.0], [65.8, 6860.0], [65.9, 6861.0], [66.0, 6863.0], [66.1, 6864.0], [66.2, 6865.0], [66.3, 6867.0], [66.4, 6868.0], [66.5, 6870.0], [66.6, 6871.0], [66.7, 6875.0], [66.8, 6877.0], [66.9, 6879.0], [67.0, 6879.0], [67.1, 6880.0], [67.2, 6880.0], [67.3, 6885.0], [67.4, 6886.0], [67.5, 6888.0], [67.6, 6888.0], [67.7, 6889.0], [67.8, 6890.0], [67.9, 6894.0], [68.0, 6895.0], [68.1, 6897.0], [68.2, 6898.0], [68.3, 6900.0], [68.4, 6901.0], [68.5, 6901.0], [68.6, 6903.0], [68.7, 6904.0], [68.8, 6905.0], [68.9, 6907.0], [69.0, 6907.0], [69.1, 6912.0], [69.2, 6912.0], [69.3, 6915.0], [69.4, 6916.0], [69.5, 6916.0], [69.6, 6919.0], [69.7, 6921.0], [69.8, 6922.0], [69.9, 6926.0], [70.0, 6926.0], [70.1, 6930.0], [70.2, 6930.0], [70.3, 6931.0], [70.4, 6933.0], [70.5, 6936.0], [70.6, 6943.0], [70.7, 6962.0], [70.8, 6965.0], [70.9, 6970.0], [71.0, 6972.0], [71.1, 6991.0], [71.2, 7013.0], [71.3, 7033.0], [71.4, 7068.0], [71.5, 7184.0], [71.6, 7201.0], [71.7, 7470.0], [71.8, 7472.0], [71.9, 7490.0], [72.0, 7492.0], [72.1, 7532.0], [72.2, 7542.0], [72.3, 7566.0], [72.4, 7567.0], [72.5, 7603.0], [72.6, 7612.0], [72.7, 7639.0], [72.8, 7657.0], [72.9, 7669.0], [73.0, 7700.0], [73.1, 7732.0], [73.2, 7749.0], [73.3, 7773.0], [73.4, 7774.0], [73.5, 7859.0], [73.6, 7947.0], [73.7, 8067.0], [73.8, 8424.0], [73.9, 8611.0], [74.0, 8794.0], [74.1, 8838.0], [74.2, 8861.0], [74.3, 8862.0], [74.4, 8864.0], [74.5, 8906.0], [74.6, 8942.0], [74.7, 8985.0], [74.8, 8986.0], [74.9, 9004.0], [75.0, 9006.0], [75.1, 9018.0], [75.2, 9051.0], [75.3, 9078.0], [75.4, 9080.0], [75.5, 9125.0], [75.6, 9142.0], [75.7, 9202.0], [75.8, 9261.0], [75.9, 9282.0], [76.0, 9313.0], [76.1, 9324.0], [76.2, 9332.0], [76.3, 9417.0], [76.4, 9418.0], [76.5, 9446.0], [76.6, 9452.0], [76.7, 9469.0], [76.8, 9474.0], [76.9, 9491.0], [77.0, 9531.0], [77.1, 9580.0], [77.2, 9583.0], [77.3, 9591.0], [77.4, 9619.0], [77.5, 9704.0], [77.6, 9705.0], [77.7, 9724.0], [77.8, 9724.0], [77.9, 9758.0], [78.0, 9766.0], [78.1, 9773.0], [78.2, 9782.0], [78.3, 9822.0], [78.4, 9838.0], [78.5, 9872.0], [78.6, 9881.0], [78.7, 9915.0], [78.8, 9954.0], [78.9, 9988.0], [79.0, 10070.0], [79.1, 10180.0], [79.2, 10200.0], [79.3, 10248.0], [79.4, 10277.0], [79.5, 10420.0], [79.6, 10501.0], [79.7, 10587.0], [79.8, 10605.0], [79.9, 10764.0], [80.0, 10773.0], [80.1, 11097.0], [80.2, 11109.0], [80.3, 11284.0], [80.4, 11547.0], [80.5, 11679.0], [80.6, 11684.0], [80.7, 11964.0], [80.8, 12018.0], [80.9, 12082.0], [81.0, 12103.0], [81.1, 12194.0], [81.2, 12307.0], [81.3, 12429.0], [81.4, 12579.0], [81.5, 12753.0], [81.6, 12852.0], [81.7, 13032.0], [81.8, 13044.0], [81.9, 13146.0], [82.0, 13199.0], [82.1, 13204.0], [82.2, 13241.0], [82.3, 13265.0], [82.4, 13433.0], [82.5, 13471.0], [82.6, 13523.0], [82.7, 13584.0], [82.8, 13602.0], [82.9, 13614.0], [83.0, 13618.0], [83.1, 13672.0], [83.2, 13677.0], [83.3, 13850.0], [83.4, 13862.0], [83.5, 13943.0], [83.6, 13972.0], [83.7, 14012.0], [83.8, 14013.0], [83.9, 14038.0], [84.0, 14038.0], [84.1, 14066.0], [84.2, 14128.0], [84.3, 14163.0], [84.4, 14245.0], [84.5, 14297.0], [84.6, 14306.0], [84.7, 14372.0], [84.8, 14383.0], [84.9, 14437.0], [85.0, 14438.0], [85.1, 14470.0], [85.2, 14476.0], [85.3, 14490.0], [85.4, 14500.0], [85.5, 14504.0], [85.6, 14514.0], [85.7, 14577.0], [85.8, 14594.0], [85.9, 14621.0], [86.0, 14637.0], [86.1, 14707.0], [86.2, 14765.0], [86.3, 14767.0], [86.4, 14850.0], [86.5, 14866.0], [86.6, 14911.0], [86.7, 14934.0], [86.8, 14940.0], [86.9, 14957.0], [87.0, 14986.0], [87.1, 15027.0], [87.2, 15082.0], [87.3, 15122.0], [87.4, 15123.0], [87.5, 15129.0], [87.6, 15141.0], [87.7, 15321.0], [87.8, 15363.0], [87.9, 15404.0], [88.0, 15418.0], [88.1, 15492.0], [88.2, 15566.0], [88.3, 15619.0], [88.4, 15659.0], [88.5, 15695.0], [88.6, 15719.0], [88.7, 15784.0], [88.8, 15833.0], [88.9, 15886.0], [89.0, 15886.0], [89.1, 15980.0], [89.2, 16022.0], [89.3, 16119.0], [89.4, 16134.0], [89.5, 16189.0], [89.6, 16222.0], [89.7, 16260.0], [89.8, 16266.0], [89.9, 16458.0], [90.0, 16476.0], [90.1, 16500.0], [90.2, 16535.0], [90.3, 16584.0], [90.4, 16667.0], [90.5, 16703.0], [90.6, 16714.0], [90.7, 16868.0], [90.8, 16963.0], [90.9, 17133.0], [91.0, 17156.0], [91.1, 17259.0], [91.2, 17315.0], [91.3, 17432.0], [91.4, 17440.0], [91.5, 17476.0], [91.6, 17504.0], [91.7, 17543.0], [91.8, 17698.0], [91.9, 17751.0], [92.0, 17822.0], [92.1, 17834.0], [92.2, 17862.0], [92.3, 17921.0], [92.4, 18005.0], [92.5, 18018.0], [92.6, 18162.0], [92.7, 18201.0], [92.8, 18390.0], [92.9, 18412.0], [93.0, 18578.0], [93.1, 18579.0], [93.2, 18654.0], [93.3, 18702.0], [93.4, 18789.0], [93.5, 18797.0], [93.6, 18835.0], [93.7, 18836.0], [93.8, 18958.0], [93.9, 18973.0], [94.0, 19138.0], [94.1, 19167.0], [94.2, 19221.0], [94.3, 19242.0], [94.4, 19256.0], [94.5, 19341.0], [94.6, 19579.0], [94.7, 19699.0], [94.8, 19730.0], [94.9, 19763.0], [95.0, 19930.0], [95.1, 20075.0], [95.2, 20148.0], [95.3, 20222.0], [95.4, 20372.0], [95.5, 20390.0], [95.6, 20601.0], [95.7, 20763.0], [95.8, 20838.0], [95.9, 20858.0], [96.0, 20905.0], [96.1, 20964.0], [96.2, 21086.0], [96.3, 21129.0], [96.4, 21204.0], [96.5, 21241.0], [96.6, 21424.0], [96.7, 21604.0], [96.8, 22014.0], [96.9, 22051.0], [97.0, 22063.0], [97.1, 22199.0], [97.2, 22310.0], [97.3, 22349.0], [97.4, 22366.0], [97.5, 22371.0], [97.6, 22485.0], [97.7, 22498.0], [97.8, 22599.0], [97.9, 22709.0], [98.0, 23141.0], [98.1, 23180.0], [98.2, 23413.0], [98.3, 23421.0], [98.4, 23487.0], [98.5, 23601.0], [98.6, 23771.0], [98.7, 23986.0], [98.8, 24211.0], [98.9, 24261.0], [99.0, 24489.0], [99.1, 24635.0], [99.2, 25022.0], [99.3, 25080.0], [99.4, 25557.0], [99.5, 25560.0], [99.6, 25945.0], [99.7, 25997.0], [99.8, 26849.0], [99.9, 26901.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1200.0, "maxY": 81.0, "series": [{"data": [[1200.0, 10.0], [1300.0, 35.0], [1400.0, 52.0], [1500.0, 59.0], [1600.0, 30.0], [1700.0, 13.0], [1800.0, 10.0], [1900.0, 5.0], [2000.0, 7.0], [2100.0, 14.0], [2200.0, 17.0], [2300.0, 6.0], [2400.0, 6.0], [2500.0, 10.0], [2600.0, 7.0], [2800.0, 7.0], [2700.0, 6.0], [2900.0, 5.0], [3000.0, 19.0], [3100.0, 41.0], [3200.0, 47.0], [3300.0, 12.0], [3400.0, 5.0], [3500.0, 7.0], [3600.0, 10.0], [3700.0, 4.0], [3800.0, 9.0], [3900.0, 13.0], [4000.0, 17.0], [4100.0, 14.0], [4200.0, 4.0], [4300.0, 8.0], [4400.0, 15.0], [4500.0, 28.0], [4600.0, 17.0], [4700.0, 18.0], [4800.0, 13.0], [4900.0, 5.0], [5000.0, 8.0], [5100.0, 8.0], [5200.0, 25.0], [5300.0, 10.0], [5500.0, 7.0], [5400.0, 7.0], [5600.0, 7.0], [5700.0, 12.0], [5800.0, 15.0], [5900.0, 8.0], [6000.0, 13.0], [6100.0, 7.0], [6200.0, 25.0], [6300.0, 34.0], [6400.0, 55.0], [6500.0, 36.0], [6600.0, 27.0], [6700.0, 33.0], [6800.0, 81.0], [6900.0, 44.0], [7000.0, 4.0], [7100.0, 2.0], [7400.0, 7.0], [7200.0, 1.0], [7600.0, 7.0], [7500.0, 6.0], [7700.0, 8.0], [7800.0, 1.0], [7900.0, 2.0], [8000.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8600.0, 1.0], [8500.0, 1.0], [8800.0, 7.0], [8900.0, 6.0], [9100.0, 3.0], [9000.0, 9.0], [9200.0, 4.0], [9400.0, 10.0], [9700.0, 11.0], [9500.0, 6.0], [9300.0, 5.0], [9600.0, 2.0], [9900.0, 5.0], [9800.0, 6.0], [10100.0, 2.0], [10200.0, 4.0], [10000.0, 1.0], [10700.0, 2.0], [10600.0, 2.0], [10500.0, 3.0], [10400.0, 1.0], [10300.0, 1.0], [11200.0, 2.0], [11000.0, 2.0], [11100.0, 1.0], [11600.0, 3.0], [11500.0, 1.0], [11700.0, 1.0], [12000.0, 3.0], [12100.0, 3.0], [11900.0, 1.0], [12400.0, 2.0], [12700.0, 1.0], [12600.0, 1.0], [12500.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13100.0, 4.0], [13200.0, 4.0], [12900.0, 1.0], [13000.0, 2.0], [13500.0, 3.0], [13600.0, 7.0], [13700.0, 1.0], [13800.0, 3.0], [13400.0, 3.0], [14200.0, 3.0], [14000.0, 7.0], [14300.0, 4.0], [13900.0, 3.0], [14100.0, 3.0], [14700.0, 4.0], [14500.0, 7.0], [14600.0, 4.0], [14400.0, 8.0], [14800.0, 3.0], [14900.0, 8.0], [15000.0, 3.0], [15100.0, 5.0], [15300.0, 3.0], [15200.0, 1.0], [15600.0, 5.0], [15500.0, 1.0], [15400.0, 4.0], [15800.0, 4.0], [15700.0, 3.0], [16200.0, 4.0], [15900.0, 2.0], [16100.0, 4.0], [16000.0, 2.0], [16400.0, 4.0], [16800.0, 2.0], [16600.0, 2.0], [17400.0, 4.0], [17200.0, 1.0], [18000.0, 4.0], [18200.0, 2.0], [17800.0, 4.0], [18400.0, 1.0], [17600.0, 2.0], [19200.0, 4.0], [18800.0, 3.0], [18600.0, 2.0], [19400.0, 1.0], [20200.0, 2.0], [20000.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [21400.0, 1.0], [21200.0, 3.0], [21000.0, 2.0], [20800.0, 3.0], [20600.0, 1.0], [22000.0, 4.0], [22400.0, 2.0], [22200.0, 1.0], [21600.0, 1.0], [23400.0, 4.0], [24200.0, 3.0], [24400.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [25000.0, 2.0], [24600.0, 1.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [16500.0, 4.0], [16700.0, 2.0], [17300.0, 2.0], [17100.0, 3.0], [16900.0, 2.0], [17500.0, 3.0], [17700.0, 2.0], [18300.0, 1.0], [18100.0, 1.0], [17900.0, 1.0], [18700.0, 4.0], [19100.0, 3.0], [18500.0, 3.0], [18900.0, 4.0], [19300.0, 1.0], [19700.0, 3.0], [20100.0, 2.0], [20300.0, 2.0], [19900.0, 1.0], [19500.0, 1.0], [20700.0, 2.0], [21100.0, 1.0], [20900.0, 2.0], [21300.0, 1.0], [21900.0, 1.0], [22300.0, 6.0], [22500.0, 2.0], [22100.0, 1.0], [23100.0, 2.0], [22700.0, 2.0], [23300.0, 1.0], [23900.0, 1.0], [23700.0, 2.0], [25100.0, 1.0], [25500.0, 2.0], [24900.0, 1.0], [25900.0, 2.0], [27100.0, 1.0], [26900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 98.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1402.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 98.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1402.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.91139240506329, "minX": 1.7169906E12, "maxY": 163.56259314456037, "series": [{"data": [[1.7169906E12, 45.91139240506329], [1.71699066E12, 163.56259314456037]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699066E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1573.9999999999998, "minX": 1.0, "maxY": 25945.0, "series": [{"data": [[2.0, 16868.0], [3.0, 18578.0], [4.0, 16260.0], [5.0, 21377.0], [6.0, 24080.0], [8.0, 16329.5], [9.0, 21604.0], [10.0, 16552.0], [11.0, 19763.0], [12.0, 18639.0], [13.0, 18003.0], [14.0, 21076.0], [15.0, 18005.0], [16.0, 16584.0], [17.0, 18789.0], [18.0, 25945.0], [19.0, 18201.0], [20.0, 19256.0], [21.0, 19221.0], [22.0, 17440.0], [23.0, 22709.0], [24.0, 19341.0], [25.0, 24635.0], [26.0, 19253.0], [27.0, 17921.0], [28.0, 18974.0], [29.0, 18973.0], [30.0, 16022.0], [31.0, 23771.0], [33.0, 17651.0], [32.0, 19138.0], [35.0, 20601.0], [34.0, 19579.0], [37.0, 23728.0], [36.0, 25080.0], [39.0, 18702.0], [38.0, 22599.0], [41.0, 2492.625], [40.0, 4305.142857142857], [43.0, 2206.85], [42.0, 2531.416666666667], [45.0, 2242.0], [44.0, 2598.823529411765], [47.0, 1573.9999999999998], [46.0, 3323.357142857143], [49.0, 4374.9375], [48.0, 3539.153846153846], [51.0, 2835.4444444444443], [50.0, 2524.958333333333], [52.0, 7511.0], [53.0, 1713.5], [54.0, 5584.875], [55.0, 7744.75], [56.0, 4174.0], [57.0, 8950.5], [58.0, 9037.5], [59.0, 1861.0], [60.0, 6862.571428571429], [61.0, 7480.333333333333], [63.0, 9152.0], [62.0, 23426.0], [64.0, 6828.666666666667], [65.0, 9182.0], [66.0, 5890.833333333333], [67.0, 4647.5], [68.0, 5543.571428571428], [69.0, 5121.857142857143], [70.0, 4960.4], [71.0, 7792.333333333333], [72.0, 10568.0], [74.0, 6722.8], [73.0, 10427.5], [75.0, 7937.333333333333], [76.0, 7968.0], [77.0, 6107.5], [78.0, 8658.333333333332], [79.0, 7677.0], [80.0, 7506.25], [81.0, 7709.0], [82.0, 6935.5], [83.0, 10136.5], [84.0, 10226.666666666668], [85.0, 6999.75], [86.0, 9973.333333333332], [87.0, 14251.5], [88.0, 2929.5], [89.0, 8103.833333333334], [90.0, 6762.0], [91.0, 6996.0], [92.0, 12687.5], [94.0, 4575.545454545454], [95.0, 3778.2222222222226], [93.0, 22349.0], [97.0, 3814.0526315789475], [98.0, 3970.0833333333335], [96.0, 4169.071428571428], [99.0, 4028.727272727272], [100.0, 5357.333333333333], [101.0, 5588.833333333334], [103.0, 12701.0], [102.0, 11641.0], [105.0, 6672.25], [107.0, 8269.0], [106.0, 16240.0], [104.0, 18517.0], [109.0, 8314.125], [108.0, 3614.0], [110.0, 3625.0], [111.0, 10448.2], [112.0, 8859.0], [113.0, 6000.6], [114.0, 10444.0], [115.0, 12063.0], [116.0, 9517.333333333332], [117.0, 8477.75], [119.0, 3939.0], [118.0, 10639.0], [120.0, 8490.42857142857], [121.0, 3980.714285714286], [122.0, 12022.8], [123.0, 4044.0], [124.0, 4077.6153846153843], [125.0, 8193.7], [126.0, 13187.5], [127.0, 7213.666666666666], [128.0, 4191.666666666667], [129.0, 12406.333333333334], [130.0, 12243.0], [131.0, 9813.5], [132.0, 4356.0], [133.0, 7978.625], [134.0, 7295.0], [135.0, 6061.5], [138.0, 5955.500000000001], [137.0, 4504.777777777777], [139.0, 5793.0], [140.0, 7234.142857142857], [141.0, 8217.0], [142.0, 6264.444444444444], [143.0, 6403.75], [136.0, 14012.0], [144.0, 9814.666666666668], [145.0, 6452.666666666666], [146.0, 4806.0], [148.0, 11092.666666666668], [147.0, 4834.0], [149.0, 7195.285714285714], [150.0, 8453.6], [151.0, 9263.5], [152.0, 6697.8], [153.0, 5034.0], [155.0, 9375.666666666666], [157.0, 7606.75], [156.0, 8284.0], [159.0, 5225.25], [158.0, 20763.0], [154.0, 18927.0], [160.0, 6956.333333333334], [162.0, 5281.25], [161.0, 8304.833333333334], [163.0, 12867.0], [164.0, 7645.25], [166.0, 8297.0], [165.0, 8383.333333333334], [167.0, 7718.6], [168.0, 11542.5], [171.0, 8573.0], [170.0, 10103.666666666668], [169.0, 9334.0], [174.0, 6695.166666666666], [173.0, 6991.8], [175.0, 5755.333333333333], [172.0, 13993.0], [176.0, 5740.0], [177.0, 5840.8], [178.0, 11294.0], [179.0, 8725.8], [180.0, 8450.666666666666], [181.0, 6812.8], [182.0, 6558.071428571429], [183.0, 5991.75], [186.0, 9034.25], [185.0, 14231.0], [187.0, 10070.25], [188.0, 8634.0], [189.0, 12538.5], [190.0, 6247.285714285715], [191.0, 7254.866666666667], [192.0, 6497.4], [193.0, 6359.0], [194.0, 7876.285714285715], [195.0, 7462.75], [196.0, 6641.764705882353], [197.0, 6483.083333333333], [198.0, 7350.214285714286], [199.0, 7574.375], [200.0, 7897.142857142857], [201.0, 8087.666666666667], [202.0, 7479.416666666666], [203.0, 6913.2307692307695], [204.0, 7088.142857142857], [205.0, 6743.222222222223], [206.0, 6787.0], [207.0, 7208.0], [208.0, 6924.612903225807], [211.0, 6940.222222222223], [210.0, 7374.115384615385], [209.0, 6948.2972972972975], [214.0, 6896.0], [212.0, 10155.0], [215.0, 10269.333333333334], [213.0, 8861.0], [216.0, 7784.5], [223.0, 15129.0], [222.0, 15122.0], [221.0, 9580.0], [220.0, 9567.0], [219.0, 8611.0], [218.0, 18285.0], [217.0, 9773.0], [227.0, 7971.8], [228.0, 7453.333333333333], [229.0, 8527.6], [230.0, 8285.333333333334], [231.0, 11192.0], [226.0, 9418.0], [225.0, 14766.0], [224.0, 19718.0], [233.0, 9701.4], [235.0, 8125.4], [236.0, 8432.5], [238.0, 8131.75], [234.0, 8101.5], [232.0, 8213.5], [239.0, 14621.0], [237.0, 9261.0], [244.0, 9075.333333333334], [247.0, 13672.0], [246.0, 13862.0], [245.0, 12935.0], [243.0, 9313.0], [242.0, 14765.0], [241.0, 11964.0], [240.0, 9051.0], [250.0, 9894.0], [255.0, 16800.0], [254.0, 10248.0], [253.0, 9986.5], [251.0, 14594.0], [249.0, 8992.0], [248.0, 15730.0], [271.0, 14026.0], [258.0, 13466.0], [262.0, 12669.0], [261.0, 14438.0], [260.0, 14438.0], [263.0, 14372.0], [256.0, 18018.0], [264.0, 12017.0], [265.0, 15492.0], [270.0, 11541.5], [269.0, 12429.0], [268.0, 12579.0], [259.0, 14437.0], [267.0, 10773.0], [266.0, 14049.0], [285.0, 11480.333333333334], [282.0, 11076.0], [274.0, 11510.5], [273.0, 15619.0], [272.0, 15248.0], [275.0, 15695.0], [283.0, 11248.666666666666], [287.0, 15596.5], [281.0, 11229.0], [280.0, 9847.0], [279.0, 16119.0], [278.0, 14013.0], [277.0, 15321.0], [276.0, 15833.0], [300.0, 11645.666666666666], [288.0, 9332.0], [291.0, 15692.0], [290.0, 16266.0], [289.0, 14914.0], [295.0, 11715.0], [294.0, 11405.666666666666], [293.0, 12224.5], [292.0, 9321.0], [298.0, 9455.0], [303.0, 13618.0], [302.0, 12697.0], [299.0, 9591.0], [297.0, 9202.0], [296.0, 9282.0], [318.0, 15980.0], [308.0, 9824.5], [309.0, 9069.0], [311.0, 13602.0], [305.0, 8942.0], [304.0, 14957.0], [307.0, 8985.0], [306.0, 8864.0], [310.0, 9078.0], [319.0, 10391.0], [317.0, 9018.0], [316.0, 15082.0], [315.0, 9583.0], [314.0, 9491.0], [313.0, 15566.0], [312.0, 14476.0], [327.0, 14383.0], [326.0, 14686.0], [325.0, 9704.0], [324.0, 9015.0], [323.0, 13943.0], [322.0, 10420.0], [321.0, 11547.0], [320.0, 10501.0], [350.0, 9446.0], [337.0, 11617.0], [343.0, 9455.0], [342.0, 9280.0], [341.0, 9324.0], [340.0, 12024.23076923077], [351.0, 10605.0], [349.0, 9724.0], [348.0, 13892.0], [347.0, 14038.0], [346.0, 10587.0], [345.0, 9417.0], [344.0, 11284.0], [364.0, 11738.0], [352.0, 10147.5], [353.0, 14038.0], [355.0, 14262.0], [354.0, 14500.0], [361.0, 12371.0], [367.0, 12670.0], [366.0, 13584.0], [365.0, 13604.0], [363.0, 13795.0], [362.0, 13653.0], [357.0, 14767.0], [356.0, 9771.0], [369.0, 12327.333333333334], [371.0, 12018.0], [370.0, 12402.0], [368.0, 12852.0], [1.0, 17133.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[151.16999999999976, 7362.73866666667]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 371.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 313.3666666666667, "minX": 1.7169906E12, "maxY": 2884919.7666666666, "series": [{"data": [[1.7169906E12, 339655.23333333334], [1.71699066E12, 2884919.7666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7169906E12, 313.3666666666667], [1.71699066E12, 2661.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699066E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1491.9620253164558, "minX": 1.7169906E12, "maxY": 8053.932935916549, "series": [{"data": [[1.7169906E12, 1491.9620253164558], [1.71699066E12, 8053.932935916549]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699066E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1096.031645569621, "minX": 1.7169906E12, "maxY": 5850.222801788378, "series": [{"data": [[1.7169906E12, 1096.031645569621], [1.71699066E12, 5850.222801788378]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699066E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 424.46835443037975, "minX": 1.7169906E12, "maxY": 701.2637853949332, "series": [{"data": [[1.7169906E12, 424.46835443037975], [1.71699066E12, 701.2637853949332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699066E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1216.0, "minX": 1.7169906E12, "maxY": 27119.0, "series": [{"data": [[1.7169906E12, 2816.0], [1.71699066E12, 27119.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7169906E12, 1216.0], [1.71699066E12, 1384.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7169906E12, 1626.3], [1.71699066E12, 17238.300000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7169906E12, 2268.479999999997], [1.71699066E12, 24823.09999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7169906E12, 1493.0], [1.71699066E12, 6475.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7169906E12, 1659.5499999999997], [1.71699066E12, 20459.699999999993]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699066E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1372.0, "minX": 1.0, "maxY": 20117.5, "series": [{"data": [[2.0, 1387.0], [33.0, 4185.0], [35.0, 1549.0], [34.0, 1372.0], [36.0, 20117.5], [60.0, 19179.5], [4.0, 11291.0], [5.0, 8838.0], [6.0, 11848.5], [9.0, 9985.5], [10.0, 14421.5], [12.0, 12328.0], [15.0, 7532.0], [1.0, 14375.0], [16.0, 9802.0], [18.0, 7716.0], [19.0, 5189.0], [20.0, 7047.5], [21.0, 4415.0], [22.0, 2470.0], [23.0, 5927.0], [24.0, 4792.5], [25.0, 6461.5], [26.0, 4104.0], [28.0, 6635.0], [29.0, 5050.0], [30.0, 6437.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 981.0, "minX": 1.0, "maxY": 10694.0, "series": [{"data": [[2.0, 1016.0], [33.0, 3795.0], [35.0, 1159.0], [34.0, 981.0], [36.0, 9239.5], [60.0, 10694.0], [4.0, 6958.5], [5.0, 6758.0], [6.0, 7234.0], [9.0, 7100.5], [10.0, 8680.0], [12.0, 8006.0], [15.0, 6643.0], [1.0, 7067.5], [16.0, 7982.5], [18.0, 6788.5], [19.0, 4746.0], [20.0, 6046.0], [21.0, 4008.0], [22.0, 2093.0], [23.0, 5529.0], [24.0, 4395.5], [25.0, 6068.0], [26.0, 3695.0], [28.0, 6247.5], [29.0, 4661.5], [30.0, 6044.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3666666666666667, "minX": 1.7169906E12, "maxY": 21.633333333333333, "series": [{"data": [[1.7169906E12, 3.3666666666666667], [1.71699066E12, 21.633333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699066E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.6333333333333333, "minX": 1.7169906E12, "maxY": 22.366666666666667, "series": [{"data": [[1.7169906E12, 2.6333333333333333], [1.71699066E12, 22.366666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699066E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.6333333333333333, "minX": 1.7169906E12, "maxY": 22.366666666666667, "series": [{"data": [[1.7169906E12, 2.6333333333333333], [1.71699066E12, 22.366666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699066E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.6333333333333333, "minX": 1.7169906E12, "maxY": 22.366666666666667, "series": [{"data": [[1.7169906E12, 2.6333333333333333], [1.71699066E12, 22.366666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699066E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

