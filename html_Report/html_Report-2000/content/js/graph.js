/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 366.0, "minX": 0.0, "maxY": 16584.0, "series": [{"data": [[0.0, 366.0], [0.1, 373.0], [0.2, 375.0], [0.3, 380.0], [0.4, 381.0], [0.5, 382.0], [0.6, 384.0], [0.7, 385.0], [0.8, 388.0], [0.9, 389.0], [1.0, 391.0], [1.1, 391.0], [1.2, 391.0], [1.3, 392.0], [1.4, 393.0], [1.5, 395.0], [1.6, 396.0], [1.7, 397.0], [1.8, 398.0], [1.9, 399.0], [2.0, 399.0], [2.1, 400.0], [2.2, 401.0], [2.3, 401.0], [2.4, 402.0], [2.5, 402.0], [2.6, 402.0], [2.7, 402.0], [2.8, 402.0], [2.9, 403.0], [3.0, 403.0], [3.1, 403.0], [3.2, 404.0], [3.3, 404.0], [3.4, 404.0], [3.5, 405.0], [3.6, 405.0], [3.7, 406.0], [3.8, 406.0], [3.9, 406.0], [4.0, 407.0], [4.1, 407.0], [4.2, 408.0], [4.3, 408.0], [4.4, 409.0], [4.5, 409.0], [4.6, 409.0], [4.7, 410.0], [4.8, 410.0], [4.9, 412.0], [5.0, 412.0], [5.1, 413.0], [5.2, 413.0], [5.3, 414.0], [5.4, 414.0], [5.5, 414.0], [5.6, 415.0], [5.7, 415.0], [5.8, 415.0], [5.9, 416.0], [6.0, 416.0], [6.1, 417.0], [6.2, 418.0], [6.3, 418.0], [6.4, 418.0], [6.5, 419.0], [6.6, 419.0], [6.7, 420.0], [6.8, 420.0], [6.9, 421.0], [7.0, 422.0], [7.1, 422.0], [7.2, 423.0], [7.3, 424.0], [7.4, 425.0], [7.5, 426.0], [7.6, 426.0], [7.7, 429.0], [7.8, 429.0], [7.9, 430.0], [8.0, 430.0], [8.1, 431.0], [8.2, 433.0], [8.3, 433.0], [8.4, 434.0], [8.5, 436.0], [8.6, 440.0], [8.7, 442.0], [8.8, 445.0], [8.9, 450.0], [9.0, 485.0], [9.1, 563.0], [9.2, 572.0], [9.3, 574.0], [9.4, 576.0], [9.5, 580.0], [9.6, 586.0], [9.7, 589.0], [9.8, 592.0], [9.9, 593.0], [10.0, 595.0], [10.1, 595.0], [10.2, 597.0], [10.3, 597.0], [10.4, 598.0], [10.5, 598.0], [10.6, 599.0], [10.7, 599.0], [10.8, 602.0], [10.9, 602.0], [11.0, 604.0], [11.1, 604.0], [11.2, 604.0], [11.3, 605.0], [11.4, 606.0], [11.5, 607.0], [11.6, 607.0], [11.7, 608.0], [11.8, 609.0], [11.9, 610.0], [12.0, 610.0], [12.1, 612.0], [12.2, 612.0], [12.3, 615.0], [12.4, 617.0], [12.5, 617.0], [12.6, 618.0], [12.7, 618.0], [12.8, 619.0], [12.9, 619.0], [13.0, 621.0], [13.1, 621.0], [13.2, 622.0], [13.3, 624.0], [13.4, 624.0], [13.5, 625.0], [13.6, 626.0], [13.7, 627.0], [13.8, 628.0], [13.9, 630.0], [14.0, 631.0], [14.1, 632.0], [14.2, 634.0], [14.3, 637.0], [14.4, 638.0], [14.5, 640.0], [14.6, 642.0], [14.7, 644.0], [14.8, 647.0], [14.9, 649.0], [15.0, 650.0], [15.1, 650.0], [15.2, 655.0], [15.3, 656.0], [15.4, 660.0], [15.5, 663.0], [15.6, 670.0], [15.7, 675.0], [15.8, 678.0], [15.9, 679.0], [16.0, 684.0], [16.1, 686.0], [16.2, 701.0], [16.3, 1236.0], [16.4, 1258.0], [16.5, 1308.0], [16.6, 1315.0], [16.7, 1319.0], [16.8, 1343.0], [16.9, 1358.0], [17.0, 1381.0], [17.1, 1384.0], [17.2, 1418.0], [17.3, 1448.0], [17.4, 1474.0], [17.5, 1480.0], [17.6, 1486.0], [17.7, 1518.0], [17.8, 1549.0], [17.9, 1560.0], [18.0, 1569.0], [18.1, 1586.0], [18.2, 1592.0], [18.3, 1602.0], [18.4, 1633.0], [18.5, 1645.0], [18.6, 1655.0], [18.7, 1658.0], [18.8, 1675.0], [18.9, 1688.0], [19.0, 1695.0], [19.1, 1724.0], [19.2, 1733.0], [19.3, 1746.0], [19.4, 1758.0], [19.5, 1767.0], [19.6, 1795.0], [19.7, 1837.0], [19.8, 1846.0], [19.9, 1856.0], [20.0, 1865.0], [20.1, 1884.0], [20.2, 1912.0], [20.3, 1928.0], [20.4, 1935.0], [20.5, 1941.0], [20.6, 1948.0], [20.7, 1963.0], [20.8, 1986.0], [20.9, 1990.0], [21.0, 2002.0], [21.1, 2010.0], [21.2, 2066.0], [21.3, 2069.0], [21.4, 2113.0], [21.5, 2130.0], [21.6, 2171.0], [21.7, 2233.0], [21.8, 2260.0], [21.9, 2276.0], [22.0, 2295.0], [22.1, 2334.0], [22.2, 2415.0], [22.3, 2416.0], [22.4, 2472.0], [22.5, 2479.0], [22.6, 2574.0], [22.7, 2607.0], [22.8, 2635.0], [22.9, 2657.0], [23.0, 2754.0], [23.1, 2755.0], [23.2, 2765.0], [23.3, 2803.0], [23.4, 2866.0], [23.5, 2927.0], [23.6, 2942.0], [23.7, 3003.0], [23.8, 3040.0], [23.9, 3080.0], [24.0, 3170.0], [24.1, 3188.0], [24.2, 3200.0], [24.3, 3209.0], [24.4, 3272.0], [24.5, 3310.0], [24.6, 3312.0], [24.7, 3338.0], [24.8, 3388.0], [24.9, 3429.0], [25.0, 3503.0], [25.1, 3535.0], [25.2, 3552.0], [25.3, 3588.0], [25.4, 3694.0], [25.5, 3702.0], [25.6, 3715.0], [25.7, 3716.0], [25.8, 3728.0], [25.9, 3753.0], [26.0, 3859.0], [26.1, 3917.0], [26.2, 3968.0], [26.3, 4001.0], [26.4, 4021.0], [26.5, 4031.0], [26.6, 4088.0], [26.7, 4122.0], [26.8, 4135.0], [26.9, 4235.0], [27.0, 4240.0], [27.1, 4285.0], [27.2, 4331.0], [27.3, 4344.0], [27.4, 4371.0], [27.5, 4388.0], [27.6, 4434.0], [27.7, 4489.0], [27.8, 4515.0], [27.9, 4535.0], [28.0, 4556.0], [28.1, 4563.0], [28.2, 4572.0], [28.3, 4589.0], [28.4, 4600.0], [28.5, 4609.0], [28.6, 4627.0], [28.7, 4659.0], [28.8, 4680.0], [28.9, 4700.0], [29.0, 4733.0], [29.1, 4753.0], [29.2, 4755.0], [29.3, 4767.0], [29.4, 4768.0], [29.5, 4776.0], [29.6, 4801.0], [29.7, 4806.0], [29.8, 4813.0], [29.9, 4818.0], [30.0, 4826.0], [30.1, 4837.0], [30.2, 4845.0], [30.3, 4850.0], [30.4, 4854.0], [30.5, 4861.0], [30.6, 4865.0], [30.7, 4879.0], [30.8, 4884.0], [30.9, 4896.0], [31.0, 4945.0], [31.1, 4947.0], [31.2, 4967.0], [31.3, 4985.0], [31.4, 4999.0], [31.5, 5009.0], [31.6, 5020.0], [31.7, 5056.0], [31.8, 5073.0], [31.9, 5103.0], [32.0, 5116.0], [32.1, 5127.0], [32.2, 5148.0], [32.3, 5152.0], [32.4, 5156.0], [32.5, 5164.0], [32.6, 5176.0], [32.7, 5181.0], [32.8, 5185.0], [32.9, 5198.0], [33.0, 5209.0], [33.1, 5220.0], [33.2, 5240.0], [33.3, 5247.0], [33.4, 5265.0], [33.5, 5271.0], [33.6, 5272.0], [33.7, 5291.0], [33.8, 5313.0], [33.9, 5337.0], [34.0, 5344.0], [34.1, 5359.0], [34.2, 5369.0], [34.3, 5398.0], [34.4, 5420.0], [34.5, 5428.0], [34.6, 5431.0], [34.7, 5443.0], [34.8, 5456.0], [34.9, 5466.0], [35.0, 5488.0], [35.1, 5489.0], [35.2, 5495.0], [35.3, 5526.0], [35.4, 5549.0], [35.5, 5568.0], [35.6, 5618.0], [35.7, 5631.0], [35.8, 5671.0], [35.9, 5678.0], [36.0, 5692.0], [36.1, 5701.0], [36.2, 5723.0], [36.3, 5731.0], [36.4, 5737.0], [36.5, 5762.0], [36.6, 5773.0], [36.7, 5789.0], [36.8, 5816.0], [36.9, 5834.0], [37.0, 5858.0], [37.1, 5878.0], [37.2, 5927.0], [37.3, 5935.0], [37.4, 5961.0], [37.5, 6023.0], [37.6, 6039.0], [37.7, 6084.0], [37.8, 6095.0], [37.9, 6099.0], [38.0, 6133.0], [38.1, 6152.0], [38.2, 6189.0], [38.3, 6192.0], [38.4, 6264.0], [38.5, 6311.0], [38.6, 6377.0], [38.7, 6384.0], [38.8, 6387.0], [38.9, 6447.0], [39.0, 6493.0], [39.1, 6519.0], [39.2, 6543.0], [39.3, 6552.0], [39.4, 6569.0], [39.5, 6596.0], [39.6, 6643.0], [39.7, 6673.0], [39.8, 6733.0], [39.9, 6746.0], [40.0, 6777.0], [40.1, 6882.0], [40.2, 6974.0], [40.3, 7034.0], [40.4, 7039.0], [40.5, 7059.0], [40.6, 7157.0], [40.7, 7204.0], [40.8, 7286.0], [40.9, 7301.0], [41.0, 7339.0], [41.1, 7358.0], [41.2, 7383.0], [41.3, 7489.0], [41.4, 7536.0], [41.5, 7565.0], [41.6, 7577.0], [41.7, 7625.0], [41.8, 7647.0], [41.9, 7653.0], [42.0, 7673.0], [42.1, 7694.0], [42.2, 7704.0], [42.3, 7749.0], [42.4, 7828.0], [42.5, 7872.0], [42.6, 7950.0], [42.7, 8020.0], [42.8, 8048.0], [42.9, 8069.0], [43.0, 8114.0], [43.1, 8129.0], [43.2, 8145.0], [43.3, 8155.0], [43.4, 8179.0], [43.5, 8230.0], [43.6, 8262.0], [43.7, 8282.0], [43.8, 8296.0], [43.9, 8311.0], [44.0, 8322.0], [44.1, 8352.0], [44.2, 8369.0], [44.3, 8404.0], [44.4, 8424.0], [44.5, 8425.0], [44.6, 8427.0], [44.7, 8460.0], [44.8, 8467.0], [44.9, 8491.0], [45.0, 8528.0], [45.1, 8536.0], [45.2, 8597.0], [45.3, 8613.0], [45.4, 8629.0], [45.5, 8639.0], [45.6, 8649.0], [45.7, 8663.0], [45.8, 8678.0], [45.9, 8690.0], [46.0, 8695.0], [46.1, 8696.0], [46.2, 8704.0], [46.3, 8747.0], [46.4, 8767.0], [46.5, 8824.0], [46.6, 8846.0], [46.7, 8866.0], [46.8, 8891.0], [46.9, 8897.0], [47.0, 8906.0], [47.1, 8916.0], [47.2, 8940.0], [47.3, 8969.0], [47.4, 9004.0], [47.5, 9013.0], [47.6, 9029.0], [47.7, 9060.0], [47.8, 9067.0], [47.9, 9121.0], [48.0, 9143.0], [48.1, 9148.0], [48.2, 9159.0], [48.3, 9216.0], [48.4, 9240.0], [48.5, 9251.0], [48.6, 9273.0], [48.7, 9306.0], [48.8, 9318.0], [48.9, 9325.0], [49.0, 9346.0], [49.1, 9381.0], [49.2, 9395.0], [49.3, 9421.0], [49.4, 9428.0], [49.5, 9435.0], [49.6, 9463.0], [49.7, 9475.0], [49.8, 9532.0], [49.9, 9571.0], [50.0, 9585.0], [50.1, 9596.0], [50.2, 9604.0], [50.3, 9612.0], [50.4, 9630.0], [50.5, 9647.0], [50.6, 9657.0], [50.7, 9690.0], [50.8, 9750.0], [50.9, 9769.0], [51.0, 9784.0], [51.1, 9803.0], [51.2, 9866.0], [51.3, 9928.0], [51.4, 10015.0], [51.5, 10065.0], [51.6, 10084.0], [51.7, 10155.0], [51.8, 10191.0], [51.9, 10268.0], [52.0, 10328.0], [52.1, 10364.0], [52.2, 10372.0], [52.3, 10417.0], [52.4, 10502.0], [52.5, 10530.0], [52.6, 10565.0], [52.7, 10631.0], [52.8, 10685.0], [52.9, 10737.0], [53.0, 10783.0], [53.1, 10799.0], [53.2, 10834.0], [53.3, 10920.0], [53.4, 10937.0], [53.5, 10986.0], [53.6, 11057.0], [53.7, 11082.0], [53.8, 11089.0], [53.9, 11172.0], [54.0, 11206.0], [54.1, 11216.0], [54.2, 11231.0], [54.3, 11271.0], [54.4, 11345.0], [54.5, 11378.0], [54.6, 11464.0], [54.7, 11499.0], [54.8, 11537.0], [54.9, 11630.0], [55.0, 11659.0], [55.1, 11677.0], [55.2, 11767.0], [55.3, 11866.0], [55.4, 11915.0], [55.5, 11938.0], [55.6, 11949.0], [55.7, 12037.0], [55.8, 12049.0], [55.9, 12120.0], [56.0, 12132.0], [56.1, 12142.0], [56.2, 12173.0], [56.3, 12183.0], [56.4, 12226.0], [56.5, 12268.0], [56.6, 12291.0], [56.7, 12309.0], [56.8, 12337.0], [56.9, 12365.0], [57.0, 12378.0], [57.1, 12422.0], [57.2, 12430.0], [57.3, 12464.0], [57.4, 12489.0], [57.5, 12524.0], [57.6, 12545.0], [57.7, 12583.0], [57.8, 12596.0], [57.9, 12604.0], [58.0, 12609.0], [58.1, 12664.0], [58.2, 12685.0], [58.3, 12724.0], [58.4, 12742.0], [58.5, 12753.0], [58.6, 12776.0], [58.7, 12781.0], [58.8, 12797.0], [58.9, 12806.0], [59.0, 12840.0], [59.1, 12867.0], [59.2, 12896.0], [59.3, 12897.0], [59.4, 12903.0], [59.5, 12918.0], [59.6, 12952.0], [59.7, 12962.0], [59.8, 13011.0], [59.9, 13050.0], [60.0, 13069.0], [60.1, 13120.0], [60.2, 13135.0], [60.3, 13197.0], [60.4, 13209.0], [60.5, 13224.0], [60.6, 13228.0], [60.7, 13247.0], [60.8, 13264.0], [60.9, 13299.0], [61.0, 13303.0], [61.1, 13318.0], [61.2, 13354.0], [61.3, 13395.0], [61.4, 13425.0], [61.5, 13480.0], [61.6, 13488.0], [61.7, 13502.0], [61.8, 13585.0], [61.9, 13615.0], [62.0, 13724.0], [62.1, 13753.0], [62.2, 13793.0], [62.3, 13810.0], [62.4, 13816.0], [62.5, 13819.0], [62.6, 13835.0], [62.7, 13838.0], [62.8, 13844.0], [62.9, 13845.0], [63.0, 13846.0], [63.1, 13847.0], [63.2, 13851.0], [63.3, 13852.0], [63.4, 13854.0], [63.5, 13855.0], [63.6, 13859.0], [63.7, 13862.0], [63.8, 13864.0], [63.9, 13865.0], [64.0, 13866.0], [64.1, 13870.0], [64.2, 13872.0], [64.3, 13874.0], [64.4, 13878.0], [64.5, 13879.0], [64.6, 13883.0], [64.7, 13886.0], [64.8, 13889.0], [64.9, 13891.0], [65.0, 13895.0], [65.1, 13898.0], [65.2, 13901.0], [65.3, 13903.0], [65.4, 13906.0], [65.5, 13909.0], [65.6, 13914.0], [65.7, 13916.0], [65.8, 13919.0], [65.9, 13920.0], [66.0, 13921.0], [66.1, 13923.0], [66.2, 13923.0], [66.3, 13925.0], [66.4, 13925.0], [66.5, 13927.0], [66.6, 13928.0], [66.7, 13929.0], [66.8, 13932.0], [66.9, 13934.0], [67.0, 13935.0], [67.1, 13937.0], [67.2, 13939.0], [67.3, 13940.0], [67.4, 13942.0], [67.5, 13946.0], [67.6, 13948.0], [67.7, 13951.0], [67.8, 13954.0], [67.9, 13958.0], [68.0, 13966.0], [68.1, 13967.0], [68.2, 13972.0], [68.3, 13974.0], [68.4, 13976.0], [68.5, 13978.0], [68.6, 13980.0], [68.7, 13984.0], [68.8, 13988.0], [68.9, 13993.0], [69.0, 13994.0], [69.1, 14001.0], [69.2, 14010.0], [69.3, 14013.0], [69.4, 14017.0], [69.5, 14024.0], [69.6, 14032.0], [69.7, 14033.0], [69.8, 14035.0], [69.9, 14043.0], [70.0, 14048.0], [70.1, 14051.0], [70.2, 14054.0], [70.3, 14055.0], [70.4, 14067.0], [70.5, 14068.0], [70.6, 14070.0], [70.7, 14073.0], [70.8, 14085.0], [70.9, 14100.0], [71.0, 14106.0], [71.1, 14107.0], [71.2, 14110.0], [71.3, 14115.0], [71.4, 14120.0], [71.5, 14123.0], [71.6, 14127.0], [71.7, 14138.0], [71.8, 14153.0], [71.9, 14155.0], [72.0, 14161.0], [72.1, 14161.0], [72.2, 14166.0], [72.3, 14171.0], [72.4, 14186.0], [72.5, 14196.0], [72.6, 14198.0], [72.7, 14203.0], [72.8, 14205.0], [72.9, 14209.0], [73.0, 14215.0], [73.1, 14223.0], [73.2, 14231.0], [73.3, 14234.0], [73.4, 14238.0], [73.5, 14242.0], [73.6, 14245.0], [73.7, 14245.0], [73.8, 14247.0], [73.9, 14254.0], [74.0, 14255.0], [74.1, 14259.0], [74.2, 14262.0], [74.3, 14266.0], [74.4, 14270.0], [74.5, 14270.0], [74.6, 14273.0], [74.7, 14276.0], [74.8, 14282.0], [74.9, 14284.0], [75.0, 14285.0], [75.1, 14290.0], [75.2, 14291.0], [75.3, 14292.0], [75.4, 14296.0], [75.5, 14299.0], [75.6, 14302.0], [75.7, 14305.0], [75.8, 14311.0], [75.9, 14312.0], [76.0, 14313.0], [76.1, 14316.0], [76.2, 14323.0], [76.3, 14324.0], [76.4, 14326.0], [76.5, 14327.0], [76.6, 14330.0], [76.7, 14332.0], [76.8, 14333.0], [76.9, 14335.0], [77.0, 14339.0], [77.1, 14344.0], [77.2, 14346.0], [77.3, 14350.0], [77.4, 14356.0], [77.5, 14362.0], [77.6, 14365.0], [77.7, 14369.0], [77.8, 14377.0], [77.9, 14382.0], [78.0, 14390.0], [78.1, 14392.0], [78.2, 14413.0], [78.3, 14429.0], [78.4, 14468.0], [78.5, 14472.0], [78.6, 14502.0], [78.7, 14523.0], [78.8, 14533.0], [78.9, 14541.0], [79.0, 14554.0], [79.1, 14560.0], [79.2, 14575.0], [79.3, 14595.0], [79.4, 14654.0], [79.5, 14684.0], [79.6, 14698.0], [79.7, 14705.0], [79.8, 14719.0], [79.9, 14734.0], [80.0, 14740.0], [80.1, 14742.0], [80.2, 14758.0], [80.3, 14769.0], [80.4, 14784.0], [80.5, 14786.0], [80.6, 14791.0], [80.7, 14813.0], [80.8, 14815.0], [80.9, 14825.0], [81.0, 14835.0], [81.1, 14841.0], [81.2, 14854.0], [81.3, 14863.0], [81.4, 14864.0], [81.5, 14879.0], [81.6, 14906.0], [81.7, 14952.0], [81.8, 14970.0], [81.9, 14976.0], [82.0, 14985.0], [82.1, 15002.0], [82.2, 15011.0], [82.3, 15028.0], [82.4, 15050.0], [82.5, 15052.0], [82.6, 15056.0], [82.7, 15058.0], [82.8, 15069.0], [82.9, 15078.0], [83.0, 15079.0], [83.1, 15089.0], [83.2, 15094.0], [83.3, 15096.0], [83.4, 15103.0], [83.5, 15112.0], [83.6, 15113.0], [83.7, 15113.0], [83.8, 15117.0], [83.9, 15125.0], [84.0, 15128.0], [84.1, 15148.0], [84.2, 15162.0], [84.3, 15165.0], [84.4, 15184.0], [84.5, 15189.0], [84.6, 15190.0], [84.7, 15193.0], [84.8, 15195.0], [84.9, 15201.0], [85.0, 15204.0], [85.1, 15209.0], [85.2, 15215.0], [85.3, 15224.0], [85.4, 15232.0], [85.5, 15238.0], [85.6, 15245.0], [85.7, 15249.0], [85.8, 15258.0], [85.9, 15286.0], [86.0, 15295.0], [86.1, 15299.0], [86.2, 15307.0], [86.3, 15374.0], [86.4, 15391.0], [86.5, 15398.0], [86.6, 15405.0], [86.7, 15414.0], [86.8, 15429.0], [86.9, 15435.0], [87.0, 15463.0], [87.1, 15481.0], [87.2, 15493.0], [87.3, 15500.0], [87.4, 15513.0], [87.5, 15522.0], [87.6, 15526.0], [87.7, 15540.0], [87.8, 15547.0], [87.9, 15548.0], [88.0, 15551.0], [88.1, 15563.0], [88.2, 15574.0], [88.3, 15579.0], [88.4, 15585.0], [88.5, 15596.0], [88.6, 15598.0], [88.7, 15603.0], [88.8, 15604.0], [88.9, 15606.0], [89.0, 15616.0], [89.1, 15621.0], [89.2, 15631.0], [89.3, 15635.0], [89.4, 15635.0], [89.5, 15641.0], [89.6, 15656.0], [89.7, 15661.0], [89.8, 15670.0], [89.9, 15677.0], [90.0, 15679.0], [90.1, 15683.0], [90.2, 15691.0], [90.3, 15698.0], [90.4, 15703.0], [90.5, 15704.0], [90.6, 15713.0], [90.7, 15717.0], [90.8, 15725.0], [90.9, 15731.0], [91.0, 15736.0], [91.1, 15745.0], [91.2, 15749.0], [91.3, 15750.0], [91.4, 15755.0], [91.5, 15758.0], [91.6, 15769.0], [91.7, 15771.0], [91.8, 15775.0], [91.9, 15781.0], [92.0, 15796.0], [92.1, 15799.0], [92.2, 15805.0], [92.3, 15823.0], [92.4, 15827.0], [92.5, 15837.0], [92.6, 15841.0], [92.7, 15843.0], [92.8, 15855.0], [92.9, 15864.0], [93.0, 15866.0], [93.1, 15870.0], [93.2, 15876.0], [93.3, 15881.0], [93.4, 15884.0], [93.5, 15893.0], [93.6, 15900.0], [93.7, 15902.0], [93.8, 15908.0], [93.9, 15917.0], [94.0, 15922.0], [94.1, 15928.0], [94.2, 15939.0], [94.3, 15944.0], [94.4, 15948.0], [94.5, 15956.0], [94.6, 15962.0], [94.7, 15968.0], [94.8, 15979.0], [94.9, 15984.0], [95.0, 15998.0], [95.1, 16003.0], [95.2, 16014.0], [95.3, 16027.0], [95.4, 16032.0], [95.5, 16038.0], [95.6, 16046.0], [95.7, 16051.0], [95.8, 16062.0], [95.9, 16066.0], [96.0, 16078.0], [96.1, 16090.0], [96.2, 16118.0], [96.3, 16124.0], [96.4, 16128.0], [96.5, 16150.0], [96.6, 16158.0], [96.7, 16166.0], [96.8, 16167.0], [96.9, 16176.0], [97.0, 16184.0], [97.1, 16194.0], [97.2, 16201.0], [97.3, 16221.0], [97.4, 16226.0], [97.5, 16242.0], [97.6, 16254.0], [97.7, 16261.0], [97.8, 16272.0], [97.9, 16277.0], [98.0, 16301.0], [98.1, 16311.0], [98.2, 16314.0], [98.3, 16316.0], [98.4, 16320.0], [98.5, 16332.0], [98.6, 16353.0], [98.7, 16359.0], [98.8, 16364.0], [98.9, 16371.0], [99.0, 16378.0], [99.1, 16394.0], [99.2, 16405.0], [99.3, 16410.0], [99.4, 16423.0], [99.5, 16425.0], [99.6, 16432.0], [99.7, 16449.0], [99.8, 16475.0], [99.9, 16548.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 140.0, "series": [{"data": [[300.0, 41.0], [400.0, 140.0], [500.0, 33.0], [600.0, 109.0], [700.0, 2.0], [1200.0, 4.0], [1300.0, 13.0], [1400.0, 11.0], [1500.0, 11.0], [1600.0, 16.0], [1700.0, 12.0], [1800.0, 10.0], [1900.0, 16.0], [2000.0, 8.0], [2100.0, 7.0], [2200.0, 7.0], [2300.0, 3.0], [2400.0, 8.0], [2500.0, 2.0], [2600.0, 5.0], [2700.0, 6.0], [2800.0, 5.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 5.0], [3200.0, 5.0], [3300.0, 8.0], [3400.0, 3.0], [3500.0, 7.0], [3600.0, 3.0], [3700.0, 9.0], [3800.0, 3.0], [3900.0, 4.0], [4000.0, 7.0], [4100.0, 4.0], [4200.0, 6.0], [4300.0, 8.0], [4400.0, 5.0], [4600.0, 10.0], [4500.0, 12.0], [4700.0, 14.0], [4800.0, 28.0], [4900.0, 9.0], [5000.0, 9.0], [5100.0, 21.0], [5200.0, 16.0], [5300.0, 12.0], [5400.0, 18.0], [5500.0, 6.0], [5600.0, 11.0], [5700.0, 14.0], [5800.0, 8.0], [5900.0, 7.0], [6000.0, 9.0], [6100.0, 8.0], [6200.0, 3.0], [6300.0, 7.0], [6400.0, 4.0], [6500.0, 10.0], [6600.0, 4.0], [6700.0, 6.0], [6800.0, 2.0], [6900.0, 2.0], [7000.0, 6.0], [7100.0, 3.0], [7200.0, 4.0], [7300.0, 7.0], [7400.0, 2.0], [7500.0, 6.0], [7600.0, 10.0], [7700.0, 5.0], [7800.0, 3.0], [7900.0, 3.0], [8000.0, 5.0], [8100.0, 11.0], [8200.0, 7.0], [8300.0, 9.0], [8400.0, 13.0], [8500.0, 6.0], [8600.0, 18.0], [8700.0, 7.0], [8800.0, 9.0], [8900.0, 9.0], [9000.0, 9.0], [9100.0, 8.0], [9200.0, 9.0], [9300.0, 11.0], [9400.0, 10.0], [9500.0, 9.0], [9600.0, 11.0], [9700.0, 7.0], [9800.0, 3.0], [9900.0, 2.0], [10000.0, 6.0], [10100.0, 5.0], [10200.0, 1.0], [10300.0, 6.0], [10400.0, 3.0], [10500.0, 6.0], [10600.0, 4.0], [10700.0, 5.0], [10800.0, 2.0], [10900.0, 6.0], [11000.0, 6.0], [11100.0, 2.0], [11200.0, 8.0], [11300.0, 4.0], [11400.0, 4.0], [11500.0, 3.0], [11600.0, 6.0], [11700.0, 1.0], [11800.0, 3.0], [11900.0, 6.0], [12000.0, 3.0], [12100.0, 11.0], [12200.0, 6.0], [12300.0, 7.0], [12400.0, 9.0], [12500.0, 8.0], [12600.0, 7.0], [12700.0, 13.0], [12800.0, 9.0], [12900.0, 9.0], [13000.0, 6.0], [13100.0, 6.0], [13200.0, 11.0], [13300.0, 8.0], [13400.0, 7.0], [13500.0, 4.0], [13600.0, 2.0], [13700.0, 5.0], [13800.0, 59.0], [13900.0, 78.0], [14000.0, 36.0], [14100.0, 36.0], [14200.0, 57.0], [14300.0, 52.0], [14400.0, 9.0], [14500.0, 15.0], [14600.0, 6.0], [14700.0, 20.0], [14800.0, 19.0], [14900.0, 9.0], [15000.0, 26.0], [15100.0, 31.0], [15200.0, 25.0], [15300.0, 8.0], [15400.0, 15.0], [15500.0, 27.0], [15600.0, 34.0], [15700.0, 36.0], [15800.0, 29.0], [15900.0, 29.0], [16000.0, 22.0], [16100.0, 21.0], [16200.0, 16.0], [16300.0, 23.0], [16400.0, 14.0], [16500.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1647.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 28.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1647.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 325.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 164.08541666666676, "minX": 1.7169894E12, "maxY": 347.4092105263158, "series": [{"data": [[1.71698946E12, 347.4092105263158], [1.7169894E12, 164.08541666666676]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71698946E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2761.0, "minX": 1.0, "maxY": 15758.0, "series": [{"data": [[2.0, 13354.0], [3.0, 13318.0], [4.0, 13303.0], [5.0, 13909.0], [6.0, 13855.0], [7.0, 13918.0], [9.0, 13906.5], [10.0, 13846.0], [11.0, 13845.0], [12.0, 13914.0], [13.0, 13927.0], [14.0, 13883.0], [15.0, 13925.0], [16.0, 13786.0], [17.0, 13939.0], [19.0, 13866.0], [20.0, 14014.0], [22.0, 13903.5], [23.0, 13870.0], [24.0, 13870.0], [25.0, 13929.0], [26.0, 13901.0], [27.0, 13904.0], [28.0, 13914.0], [29.0, 13933.0], [30.0, 13941.0], [31.0, 13851.0], [33.0, 13950.0], [32.0, 13978.0], [35.0, 13870.0], [34.0, 13946.0], [37.0, 13925.0], [36.0, 13979.0], [39.0, 13945.0], [38.0, 13990.0], [41.0, 13942.0], [40.0, 13958.0], [43.0, 13899.0], [42.0, 13952.0], [45.0, 13859.0], [44.0, 14070.0], [47.0, 13948.0], [46.0, 13958.0], [49.0, 14024.0], [48.0, 13974.0], [51.0, 7566.5], [50.0, 13898.0], [52.0, 4451.5], [53.0, 2907.125], [54.0, 7604.5], [55.0, 7669.0], [56.0, 4505.25], [57.0, 3919.0], [58.0, 4542.5], [59.0, 5673.666666666667], [60.0, 5634.333333333333], [61.0, 7734.5], [62.0, 5648.666666666667], [63.0, 7723.5], [64.0, 3334.285714285714], [65.0, 3189.375], [66.0, 4703.75], [67.0, 4730.0], [68.0, 3439.5714285714284], [69.0, 4769.0], [71.0, 3309.0], [70.0, 7833.0], [72.0, 5799.0], [73.0, 5859.333333333334], [75.0, 3857.0], [74.0, 13931.0], [76.0, 7870.0], [77.0, 4321.4], [78.0, 3441.375], [79.0, 5919.666666666666], [80.0, 4374.4], [82.0, 6015.666666666666], [81.0, 6005.0], [83.0, 8050.0], [84.0, 4413.0], [85.0, 6065.0], [87.0, 5075.75], [86.0, 13934.0], [91.0, 4581.0], [90.0, 13862.0], [89.0, 13878.0], [88.0, 13865.0], [92.0, 8077.0], [93.0, 5174.25], [95.0, 8135.5], [96.0, 6208.0], [97.0, 8147.0], [98.0, 8144.5], [99.0, 13895.0], [100.0, 5322.25], [102.0, 8198.0], [103.0, 13835.0], [101.0, 13865.0], [104.0, 5460.5], [105.0, 6349.0], [107.0, 8266.5], [106.0, 13935.0], [110.0, 8285.5], [111.0, 2761.0], [109.0, 13923.0], [108.0, 13925.0], [112.0, 8283.0], [114.0, 6464.666666666666], [113.0, 8360.0], [115.0, 2857.5], [116.0, 10249.666666666666], [117.0, 8491.0], [118.0, 8453.0], [119.0, 8408.5], [120.0, 6596.666666666666], [122.0, 8453.0], [123.0, 6699.333333333334], [121.0, 14011.0], [126.0, 6774.0], [125.0, 8513.0], [127.0, 8587.5], [124.0, 14040.0], [129.0, 6842.333333333334], [128.0, 8592.5], [130.0, 5927.5], [131.0, 8584.0], [133.0, 4518.111111111111], [134.0, 8689.0], [135.0, 14068.0], [132.0, 14051.0], [138.0, 6966.0], [140.0, 7058.333333333334], [142.0, 6166.5], [143.0, 14110.0], [141.0, 14205.0], [139.0, 14073.0], [137.0, 14024.0], [136.0, 14010.0], [144.0, 7072.0], [145.0, 8833.5], [148.0, 8904.0], [150.0, 5802.6], [149.0, 5774.0], [151.0, 14107.0], [147.0, 14138.0], [146.0, 14043.0], [152.0, 6337.75], [156.0, 9012.5], [157.0, 7313.333333333334], [159.0, 9107.0], [158.0, 14155.0], [155.0, 14209.0], [154.0, 14235.0], [153.0, 14196.0], [160.0, 6515.0], [161.0, 4011.25], [162.0, 10798.333333333334], [165.0, 7460.0], [164.0, 9113.5], [166.0, 9094.5], [167.0, 7484.0], [163.0, 14167.0], [170.0, 7544.666666666666], [171.0, 7568.0], [173.0, 9298.5], [172.0, 9247.5], [174.0, 6802.5], [175.0, 9286.5], [169.0, 14234.0], [168.0, 14120.0], [176.0, 7652.666666666666], [177.0, 6842.75], [181.0, 9379.5], [182.0, 5355.166666666667], [183.0, 9404.0], [180.0, 14270.0], [179.0, 14326.0], [178.0, 14203.0], [184.0, 4576.0], [185.0, 9431.5], [186.0, 7035.75], [187.0, 7841.666666666666], [188.0, 9516.0], [191.0, 6145.714285714285], [190.0, 7911.666666666666], [189.0, 14312.0], [192.0, 5699.1], [193.0, 6415.666666666666], [194.0, 6171.285714285714], [195.0, 6444.666666666666], [196.0, 6791.6], [198.0, 7258.75], [197.0, 6777.6], [199.0, 7299.75], [200.0, 7241.25], [202.0, 8023.333333333334], [201.0, 8045.666666666666], [203.0, 7314.75], [204.0, 6942.6], [206.0, 6641.5], [205.0, 9708.0], [207.0, 5180.625], [208.0, 7453.875], [209.0, 7030.2], [212.0, 6773.833333333334], [210.0, 6797.666666666667], [211.0, 8279.333333333334], [214.0, 7115.8], [213.0, 7112.2], [215.0, 6358.333333333334], [216.0, 9837.0], [218.0, 8394.333333333334], [220.0, 8005.857142857143], [219.0, 5460.25], [221.0, 7016.166666666667], [223.0, 5526.0], [222.0, 7699.25], [217.0, 14324.0], [227.0, 7803.25], [226.0, 8602.333333333334], [228.0, 5679.5], [230.0, 5760.0], [229.0, 5703.6], [231.0, 5757.75], [225.0, 14335.0], [224.0, 14308.0], [234.0, 5785.8], [233.0, 5816.0], [232.0, 5773.0], [235.0, 5768.5], [237.0, 5731.5], [236.0, 5717.0], [239.0, 5920.4], [238.0, 5867.0], [240.0, 5968.0], [241.0, 5997.5], [242.0, 6039.0], [245.0, 6135.5], [244.0, 6084.0], [246.0, 6095.0], [247.0, 6252.214285714286], [255.0, 14254.0], [254.0, 14239.0], [253.0, 14311.0], [252.0, 14382.0], [251.0, 14319.458333333334], [268.0, 10531.5], [258.0, 10281.5], [256.0, 10304.0], [257.0, 14161.0], [259.0, 8350.0], [260.0, 9027.666666666666], [262.0, 13967.0], [261.0, 13993.0], [263.0, 7782.0], [264.0, 8373.75], [265.0, 10268.5], [266.0, 8070.8], [267.0, 10203.5], [270.0, 9252.333333333334], [269.0, 13724.0], [271.0, 6777.0], [286.0, 14812.0], [273.0, 10487.0], [275.0, 10653.5], [274.0, 14323.0], [285.0, 14575.0], [284.0, 14559.0], [276.0, 10617.0], [277.0, 14468.0], [278.0, 9470.0], [279.0, 14533.0], [272.0, 14325.5], [280.0, 10782.0], [283.0, 8534.4], [282.0, 10817.0], [281.0, 14560.0], [287.0, 8672.6], [291.0, 10983.5], [292.0, 9779.0], [293.0, 9164.5], [294.0, 11065.0], [295.0, 14698.0], [290.0, 14734.0], [289.0, 14786.0], [288.0, 14740.0], [296.0, 9837.0], [297.0, 9855.333333333334], [299.0, 14719.0], [298.0, 14813.0], [303.0, 7538.25], [302.0, 9419.5], [301.0, 14815.0], [300.0, 14769.0], [317.0, 11439.0], [304.0, 11217.75], [307.0, 8480.222222222223], [306.0, 14841.0], [305.0, 14844.0], [316.0, 14985.0], [309.0, 9529.5], [308.0, 14865.0], [310.0, 11298.0], [311.0, 15078.0], [313.0, 11455.5], [315.0, 14970.0], [314.0, 14972.0], [312.0, 10151.0], [318.0, 11428.5], [319.0, 15056.0], [321.0, 10324.0], [320.0, 11489.0], [322.0, 9790.75], [323.0, 8096.0], [324.0, 12756.333333333334], [325.0, 9834.5], [326.0, 10453.666666666666], [327.0, 11601.5], [329.0, 11583.0], [330.0, 10505.333333333334], [331.0, 9629.8], [328.0, 11631.0], [335.0, 10616.333333333334], [334.0, 11716.5], [332.0, 9639.0], [333.0, 11700.0], [337.0, 10087.5], [336.0, 9008.75], [338.0, 8406.0], [339.0, 15139.5], [348.0, 9772.333333333334], [349.0, 9992.4], [350.0, 10915.333333333334], [351.0, 10880.666666666666], [340.0, 10706.0], [342.0, 10681.0], [341.0, 11823.0], [344.0, 9913.8], [343.0, 11853.0], [345.0, 10795.0], [346.0, 10792.0], [347.0, 9967.6], [354.0, 10902.333333333334], [353.0, 10973.0], [355.0, 10105.6], [364.0, 12168.0], [366.0, 11157.333333333334], [365.0, 15249.0], [367.0, 15184.0], [356.0, 10965.666666666666], [358.0, 10984.0], [357.0, 10463.25], [359.0, 11047.333333333334], [352.0, 15091.0], [360.0, 11050.333333333334], [362.0, 9931.142857142857], [363.0, 11140.666666666666], [361.0, 11066.333333333334], [369.0, 10443.4], [368.0, 12155.5], [371.0, 10431.2], [370.0, 12219.5], [373.0, 10505.4], [372.0, 12259.5], [374.0, 12271.0], [376.0, 10839.0], [383.0, 11470.333333333334], [382.0, 15305.0], [380.0, 11374.333333333334], [381.0, 11424.666666666666], [377.0, 12371.5], [379.0, 11371.666666666666], [378.0, 15162.0], [375.0, 11334.0], [385.0, 11545.666666666666], [384.0, 10743.2], [386.0, 11060.25], [387.0, 12471.5], [389.0, 10683.833333333332], [388.0, 15404.0], [391.0, 10917.5], [390.0, 11463.666666666666], [392.0, 12361.5], [396.0, 12453.5], [398.0, 9638.5], [394.0, 11842.4], [395.0, 12469.0], [401.0, 9838.0], [400.0, 9780.5], [402.0, 9897.0], [403.0, 9922.0], [404.0, 10008.0], [405.0, 10061.0], [406.0, 10079.0], [407.0, 7635.571428571428], [408.0, 7319.61111111111], [415.0, 10873.6231884058], [414.0, 9550.335616438353], [409.0, 6075.411764705884], [411.0, 7695.125], [410.0, 7826.929411764705], [413.0, 9992.274509803923], [412.0, 9290.123287671233], [417.0, 12736.333333333334], [416.0, 10939.727272727274], [418.0, 11560.192307692305], [419.0, 10660.0], [420.0, 8157.5], [422.0, 15732.0], [421.0, 10620.333333333334], [423.0, 12721.8], [424.0, 15758.0], [1.0, 13425.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[303.4114999999995, 8974.042000000018]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 424.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 952.0, "minX": 1.7169894E12, "maxY": 2579303.9, "series": [{"data": [[1.71698946E12, 2579303.9], [1.7169894E12, 1031864.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71698946E12, 2655.6833333333334], [1.7169894E12, 952.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71698946E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4086.1374999999994, "minX": 1.7169894E12, "maxY": 10517.590789473687, "series": [{"data": [[1.71698946E12, 10517.590789473687], [1.7169894E12, 4086.1374999999994]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71698946E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3688.5499999999993, "minX": 1.7169894E12, "maxY": 10153.333552631584, "series": [{"data": [[1.71698946E12, 10153.333552631584], [1.7169894E12, 3688.5499999999993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71698946E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 418.58124999999984, "minX": 1.7169894E12, "maxY": 420.45723684210463, "series": [{"data": [[1.71698946E12, 420.45723684210463], [1.7169894E12, 418.58124999999984]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71698946E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1236.0, "minX": 1.7169894E12, "maxY": 16584.0, "series": [{"data": [[1.71698946E12, 16584.0], [1.7169894E12, 6974.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71698946E12, 7021.0], [1.7169894E12, 1236.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71698946E12, 15924.400000000001], [1.7169894E12, 6096.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71698946E12, 16423.04], [1.7169894E12, 6796.19]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71698946E12, 14051.0], [1.7169894E12, 4580.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71698946E12, 16184.6], [1.7169894E12, 6507.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71698946E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 414.0, "minX": 21.0, "maxY": 16318.0, "series": [{"data": [[33.0, 5185.0], [35.0, 10920.0], [37.0, 16318.0], [36.0, 15939.0], [38.0, 12300.5], [39.0, 15779.0], [41.0, 15901.0], [40.0, 13407.5], [42.0, 14054.5], [43.0, 15548.0], [44.0, 15984.0], [21.0, 4257.5], [22.0, 3716.0], [23.0, 4135.0], [24.0, 6301.5], [25.0, 9427.0], [26.0, 14110.5], [27.0, 7655.5], [28.0, 7160.5], [29.0, 11225.5], [30.0, 13961.5], [31.0, 14841.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 414.0], [37.0, 599.0], [36.0, 433.0], [38.0, 428.5], [39.0, 608.5], [41.0, 575.5], [40.0, 432.5], [42.0, 416.0], [43.0, 424.5], [44.0, 416.0], [31.0, 503.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 21.0, "maxY": 15923.5, "series": [{"data": [[33.0, 4781.0], [35.0, 10536.0], [37.0, 15923.5], [36.0, 15538.0], [38.0, 11895.0], [39.0, 15373.5], [41.0, 15507.5], [40.0, 12983.0], [42.0, 13680.5], [43.0, 15176.0], [44.0, 15576.0], [21.0, 3830.0], [22.0, 3327.0], [23.0, 3779.0], [24.0, 5904.0], [25.0, 9011.5], [26.0, 13712.0], [27.0, 7257.5], [28.0, 6771.5], [29.0, 10831.5], [30.0, 13549.0], [31.0, 14457.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 0.0], [37.0, 599.0], [36.0, 0.0], [38.0, 0.0], [39.0, 608.5], [41.0, 575.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [44.0, 0.0], [31.0, 291.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.633333333333333, "minX": 1.7169894E12, "maxY": 20.7, "series": [{"data": [[1.71698946E12, 20.7], [1.7169894E12, 12.633333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71698946E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.4, "minX": 1.7169894E12, "maxY": 19.916666666666668, "series": [{"data": [[1.71698946E12, 19.916666666666668], [1.7169894E12, 8.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71698946E12, 3.0166666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.71698946E12, 2.4]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71698946E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.416666666666667, "minX": 1.7169894E12, "maxY": 19.916666666666668, "series": [{"data": [[1.71698946E12, 19.916666666666668], [1.7169894E12, 8.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71698946E12, 5.416666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71698946E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.416666666666667, "minX": 1.7169894E12, "maxY": 19.916666666666668, "series": [{"data": [[1.71698946E12, 19.916666666666668], [1.7169894E12, 8.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71698946E12, 5.416666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71698946E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

