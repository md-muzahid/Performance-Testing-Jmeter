/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 374.0, "minX": 0.0, "maxY": 15292.0, "series": [{"data": [[0.0, 374.0], [0.1, 378.0], [0.2, 391.0], [0.3, 395.0], [0.4, 404.0], [0.5, 413.0], [0.6, 416.0], [0.7, 422.0], [0.8, 434.0], [0.9, 443.0], [1.0, 576.0], [1.1, 593.0], [1.2, 617.0], [1.3, 618.0], [1.4, 621.0], [1.5, 632.0], [1.6, 634.0], [1.7, 648.0], [1.8, 660.0], [1.9, 1123.0], [2.0, 1192.0], [2.1, 1201.0], [2.2, 1203.0], [2.3, 1206.0], [2.4, 1255.0], [2.5, 1267.0], [2.6, 1269.0], [2.7, 1284.0], [2.8, 1287.0], [2.9, 1290.0], [3.0, 1301.0], [3.1, 1304.0], [3.2, 1318.0], [3.3, 1319.0], [3.4, 1325.0], [3.5, 1327.0], [3.6, 1335.0], [3.7, 1342.0], [3.8, 1343.0], [3.9, 1348.0], [4.0, 1355.0], [4.1, 1359.0], [4.2, 1365.0], [4.3, 1365.0], [4.4, 1372.0], [4.5, 1375.0], [4.6, 1380.0], [4.7, 1390.0], [4.8, 1394.0], [4.9, 1397.0], [5.0, 1398.0], [5.1, 1408.0], [5.2, 1415.0], [5.3, 1419.0], [5.4, 1424.0], [5.5, 1430.0], [5.6, 1430.0], [5.7, 1436.0], [5.8, 1438.0], [5.9, 1441.0], [6.0, 1443.0], [6.1, 1445.0], [6.2, 1458.0], [6.3, 1461.0], [6.4, 1476.0], [6.5, 1480.0], [6.6, 1483.0], [6.7, 1487.0], [6.8, 1488.0], [6.9, 1497.0], [7.0, 1513.0], [7.1, 1515.0], [7.2, 1515.0], [7.3, 1516.0], [7.4, 1523.0], [7.5, 1530.0], [7.6, 1532.0], [7.7, 1543.0], [7.8, 1543.0], [7.9, 1560.0], [8.0, 1566.0], [8.1, 1570.0], [8.2, 1582.0], [8.3, 1599.0], [8.4, 1621.0], [8.5, 1632.0], [8.6, 1632.0], [8.7, 1646.0], [8.8, 1658.0], [8.9, 1684.0], [9.0, 1691.0], [9.1, 1694.0], [9.2, 1696.0], [9.3, 1710.0], [9.4, 1718.0], [9.5, 1727.0], [9.6, 1731.0], [9.7, 1745.0], [9.8, 1747.0], [9.9, 1754.0], [10.0, 1774.0], [10.1, 1781.0], [10.2, 1794.0], [10.3, 1797.0], [10.4, 1829.0], [10.5, 1839.0], [10.6, 1843.0], [10.7, 1858.0], [10.8, 1858.0], [10.9, 1884.0], [11.0, 1891.0], [11.1, 1892.0], [11.2, 1903.0], [11.3, 1905.0], [11.4, 1910.0], [11.5, 1917.0], [11.6, 1918.0], [11.7, 1925.0], [11.8, 1943.0], [11.9, 1951.0], [12.0, 1956.0], [12.1, 1957.0], [12.2, 1963.0], [12.3, 1964.0], [12.4, 1981.0], [12.5, 1988.0], [12.6, 1990.0], [12.7, 1997.0], [12.8, 1998.0], [12.9, 2000.0], [13.0, 2005.0], [13.1, 2011.0], [13.2, 2017.0], [13.3, 2032.0], [13.4, 2037.0], [13.5, 2042.0], [13.6, 2042.0], [13.7, 2083.0], [13.8, 2094.0], [13.9, 2097.0], [14.0, 2101.0], [14.1, 2106.0], [14.2, 2143.0], [14.3, 2155.0], [14.4, 2174.0], [14.5, 2182.0], [14.6, 2185.0], [14.7, 2209.0], [14.8, 2246.0], [14.9, 2267.0], [15.0, 2321.0], [15.1, 2342.0], [15.2, 2375.0], [15.3, 2385.0], [15.4, 2438.0], [15.5, 2464.0], [15.6, 2482.0], [15.7, 2498.0], [15.8, 2506.0], [15.9, 2554.0], [16.0, 2580.0], [16.1, 2594.0], [16.2, 2655.0], [16.3, 2658.0], [16.4, 2672.0], [16.5, 2691.0], [16.6, 2733.0], [16.7, 2776.0], [16.8, 2789.0], [16.9, 2790.0], [17.0, 2817.0], [17.1, 2907.0], [17.2, 2956.0], [17.3, 2976.0], [17.4, 3042.0], [17.5, 3229.0], [17.6, 3251.0], [17.7, 3275.0], [17.8, 3284.0], [17.9, 3349.0], [18.0, 3392.0], [18.1, 3402.0], [18.2, 3423.0], [18.3, 3505.0], [18.4, 3525.0], [18.5, 3552.0], [18.6, 3552.0], [18.7, 3557.0], [18.8, 3561.0], [18.9, 3569.0], [19.0, 3578.0], [19.1, 3583.0], [19.2, 3593.0], [19.3, 3608.0], [19.4, 3622.0], [19.5, 3653.0], [19.6, 3688.0], [19.7, 3710.0], [19.8, 3712.0], [19.9, 3722.0], [20.0, 3795.0], [20.1, 3832.0], [20.2, 3853.0], [20.3, 3861.0], [20.4, 3873.0], [20.5, 3921.0], [20.6, 3925.0], [20.7, 3964.0], [20.8, 3973.0], [20.9, 4018.0], [21.0, 4037.0], [21.1, 4048.0], [21.2, 4096.0], [21.3, 4101.0], [21.4, 4114.0], [21.5, 4121.0], [21.6, 4123.0], [21.7, 4148.0], [21.8, 4148.0], [21.9, 4159.0], [22.0, 4196.0], [22.1, 4199.0], [22.2, 4247.0], [22.3, 4253.0], [22.4, 4266.0], [22.5, 4272.0], [22.6, 4308.0], [22.7, 4326.0], [22.8, 4342.0], [22.9, 4363.0], [23.0, 4373.0], [23.1, 4380.0], [23.2, 4413.0], [23.3, 4437.0], [23.4, 4480.0], [23.5, 4483.0], [23.6, 4495.0], [23.7, 4513.0], [23.8, 4515.0], [23.9, 4517.0], [24.0, 4537.0], [24.1, 4539.0], [24.2, 4567.0], [24.3, 4568.0], [24.4, 4575.0], [24.5, 4606.0], [24.6, 4617.0], [24.7, 4623.0], [24.8, 4640.0], [24.9, 4642.0], [25.0, 4666.0], [25.1, 4687.0], [25.2, 4694.0], [25.3, 4732.0], [25.4, 4765.0], [25.5, 4805.0], [25.6, 4831.0], [25.7, 4851.0], [25.8, 4864.0], [25.9, 4934.0], [26.0, 4966.0], [26.1, 4999.0], [26.2, 5016.0], [26.3, 5017.0], [26.4, 5055.0], [26.5, 5078.0], [26.6, 5090.0], [26.7, 5109.0], [26.8, 5115.0], [26.9, 5126.0], [27.0, 5133.0], [27.1, 5166.0], [27.2, 5227.0], [27.3, 5228.0], [27.4, 5274.0], [27.5, 5293.0], [27.6, 5360.0], [27.7, 5396.0], [27.8, 5400.0], [27.9, 5443.0], [28.0, 5449.0], [28.1, 5460.0], [28.2, 5490.0], [28.3, 5512.0], [28.4, 5538.0], [28.5, 5589.0], [28.6, 5592.0], [28.7, 5629.0], [28.8, 5677.0], [28.9, 5720.0], [29.0, 5731.0], [29.1, 5734.0], [29.2, 5746.0], [29.3, 5759.0], [29.4, 5789.0], [29.5, 5857.0], [29.6, 5882.0], [29.7, 5913.0], [29.8, 5917.0], [29.9, 5927.0], [30.0, 5931.0], [30.1, 5947.0], [30.2, 5953.0], [30.3, 5957.0], [30.4, 5964.0], [30.5, 5973.0], [30.6, 5977.0], [30.7, 5991.0], [30.8, 5992.0], [30.9, 6013.0], [31.0, 6014.0], [31.1, 6026.0], [31.2, 6034.0], [31.3, 6038.0], [31.4, 6065.0], [31.5, 6078.0], [31.6, 6096.0], [31.7, 6109.0], [31.8, 6125.0], [31.9, 6126.0], [32.0, 6132.0], [32.1, 6153.0], [32.2, 6182.0], [32.3, 6183.0], [32.4, 6188.0], [32.5, 6205.0], [32.6, 6231.0], [32.7, 6234.0], [32.8, 6252.0], [32.9, 6265.0], [33.0, 6271.0], [33.1, 6285.0], [33.2, 6293.0], [33.3, 6297.0], [33.4, 6362.0], [33.5, 6402.0], [33.6, 6406.0], [33.7, 6410.0], [33.8, 6416.0], [33.9, 6447.0], [34.0, 6479.0], [34.1, 6516.0], [34.2, 6539.0], [34.3, 6549.0], [34.4, 6560.0], [34.5, 6574.0], [34.6, 6575.0], [34.7, 6594.0], [34.8, 6613.0], [34.9, 6625.0], [35.0, 6640.0], [35.1, 6663.0], [35.2, 6675.0], [35.3, 6679.0], [35.4, 6682.0], [35.5, 6692.0], [35.6, 6713.0], [35.7, 6715.0], [35.8, 6718.0], [35.9, 6731.0], [36.0, 6795.0], [36.1, 6809.0], [36.2, 6828.0], [36.3, 6830.0], [36.4, 6870.0], [36.5, 6886.0], [36.6, 6894.0], [36.7, 6911.0], [36.8, 6920.0], [36.9, 6973.0], [37.0, 7004.0], [37.1, 7005.0], [37.2, 7055.0], [37.3, 7095.0], [37.4, 7134.0], [37.5, 7151.0], [37.6, 7161.0], [37.7, 7229.0], [37.8, 7232.0], [37.9, 7298.0], [38.0, 7304.0], [38.1, 7312.0], [38.2, 7337.0], [38.3, 7357.0], [38.4, 7439.0], [38.5, 7472.0], [38.6, 7474.0], [38.7, 7491.0], [38.8, 7498.0], [38.9, 7511.0], [39.0, 7519.0], [39.1, 7528.0], [39.2, 7544.0], [39.3, 7553.0], [39.4, 7588.0], [39.5, 7603.0], [39.6, 7603.0], [39.7, 7617.0], [39.8, 7628.0], [39.9, 7648.0], [40.0, 7684.0], [40.1, 7685.0], [40.2, 7688.0], [40.3, 7693.0], [40.4, 7736.0], [40.5, 7756.0], [40.6, 7762.0], [40.7, 7787.0], [40.8, 7790.0], [40.9, 7812.0], [41.0, 7869.0], [41.1, 7890.0], [41.2, 7911.0], [41.3, 7912.0], [41.4, 7954.0], [41.5, 7975.0], [41.6, 8069.0], [41.7, 8149.0], [41.8, 8154.0], [41.9, 8215.0], [42.0, 8238.0], [42.1, 8286.0], [42.2, 8328.0], [42.3, 8332.0], [42.4, 8352.0], [42.5, 8383.0], [42.6, 8401.0], [42.7, 8409.0], [42.8, 8432.0], [42.9, 8488.0], [43.0, 8494.0], [43.1, 8557.0], [43.2, 8559.0], [43.3, 8606.0], [43.4, 8654.0], [43.5, 8687.0], [43.6, 8717.0], [43.7, 8722.0], [43.8, 8770.0], [43.9, 8784.0], [44.0, 8818.0], [44.1, 8844.0], [44.2, 8884.0], [44.3, 8913.0], [44.4, 8945.0], [44.5, 8966.0], [44.6, 8990.0], [44.7, 8997.0], [44.8, 9036.0], [44.9, 9053.0], [45.0, 9115.0], [45.1, 9149.0], [45.2, 9172.0], [45.3, 9228.0], [45.4, 9258.0], [45.5, 9289.0], [45.6, 9309.0], [45.7, 9313.0], [45.8, 9329.0], [45.9, 9455.0], [46.0, 9463.0], [46.1, 9475.0], [46.2, 9519.0], [46.3, 9528.0], [46.4, 9548.0], [46.5, 9564.0], [46.6, 9575.0], [46.7, 9617.0], [46.8, 9622.0], [46.9, 9623.0], [47.0, 9627.0], [47.1, 9633.0], [47.2, 9643.0], [47.3, 9655.0], [47.4, 9662.0], [47.5, 9665.0], [47.6, 9671.0], [47.7, 9706.0], [47.8, 9706.0], [47.9, 9714.0], [48.0, 9718.0], [48.1, 9726.0], [48.2, 9732.0], [48.3, 9735.0], [48.4, 9737.0], [48.5, 9740.0], [48.6, 9756.0], [48.7, 9760.0], [48.8, 9761.0], [48.9, 9764.0], [49.0, 9776.0], [49.1, 9777.0], [49.2, 9795.0], [49.3, 9805.0], [49.4, 9808.0], [49.5, 9812.0], [49.6, 9818.0], [49.7, 9829.0], [49.8, 9835.0], [49.9, 9841.0], [50.0, 9850.0], [50.1, 9853.0], [50.2, 9856.0], [50.3, 9856.0], [50.4, 9859.0], [50.5, 9865.0], [50.6, 9869.0], [50.7, 9872.0], [50.8, 9872.0], [50.9, 9877.0], [51.0, 9892.0], [51.1, 9906.0], [51.2, 9913.0], [51.3, 9919.0], [51.4, 9924.0], [51.5, 9931.0], [51.6, 9933.0], [51.7, 9940.0], [51.8, 9955.0], [51.9, 9980.0], [52.0, 9992.0], [52.1, 9993.0], [52.2, 9997.0], [52.3, 9998.0], [52.4, 10005.0], [52.5, 10007.0], [52.6, 10007.0], [52.7, 10011.0], [52.8, 10013.0], [52.9, 10028.0], [53.0, 10033.0], [53.1, 10038.0], [53.2, 10043.0], [53.3, 10046.0], [53.4, 10053.0], [53.5, 10057.0], [53.6, 10061.0], [53.7, 10070.0], [53.8, 10079.0], [53.9, 10088.0], [54.0, 10097.0], [54.1, 10099.0], [54.2, 10107.0], [54.3, 10113.0], [54.4, 10143.0], [54.5, 10152.0], [54.6, 10160.0], [54.7, 10182.0], [54.8, 10183.0], [54.9, 10194.0], [55.0, 10233.0], [55.1, 10242.0], [55.2, 10257.0], [55.3, 10260.0], [55.4, 10272.0], [55.5, 10288.0], [55.6, 10291.0], [55.7, 10309.0], [55.8, 10310.0], [55.9, 10321.0], [56.0, 10381.0], [56.1, 10391.0], [56.2, 10440.0], [56.3, 10478.0], [56.4, 10537.0], [56.5, 10551.0], [56.6, 10551.0], [56.7, 10558.0], [56.8, 10571.0], [56.9, 10583.0], [57.0, 10596.0], [57.1, 10608.0], [57.2, 10617.0], [57.3, 10620.0], [57.4, 10648.0], [57.5, 10665.0], [57.6, 10673.0], [57.7, 10705.0], [57.8, 10712.0], [57.9, 10721.0], [58.0, 10771.0], [58.1, 10775.0], [58.2, 10805.0], [58.3, 10818.0], [58.4, 10960.0], [58.5, 10995.0], [58.6, 11026.0], [58.7, 11049.0], [58.8, 11057.0], [58.9, 11097.0], [59.0, 11107.0], [59.1, 11117.0], [59.2, 11132.0], [59.3, 11153.0], [59.4, 11184.0], [59.5, 11197.0], [59.6, 11212.0], [59.7, 11239.0], [59.8, 11247.0], [59.9, 11258.0], [60.0, 11266.0], [60.1, 11276.0], [60.2, 11289.0], [60.3, 11289.0], [60.4, 11300.0], [60.5, 11307.0], [60.6, 11307.0], [60.7, 11318.0], [60.8, 11318.0], [60.9, 11347.0], [61.0, 11361.0], [61.1, 11361.0], [61.2, 11365.0], [61.3, 11367.0], [61.4, 11401.0], [61.5, 11405.0], [61.6, 11412.0], [61.7, 11430.0], [61.8, 11431.0], [61.9, 11449.0], [62.0, 11501.0], [62.1, 11501.0], [62.2, 11537.0], [62.3, 11569.0], [62.4, 11670.0], [62.5, 11699.0], [62.6, 11716.0], [62.7, 11833.0], [62.8, 11836.0], [62.9, 11861.0], [63.0, 11918.0], [63.1, 11919.0], [63.2, 11952.0], [63.3, 12016.0], [63.4, 12024.0], [63.5, 12072.0], [63.6, 12078.0], [63.7, 12138.0], [63.8, 12149.0], [63.9, 12221.0], [64.0, 12221.0], [64.1, 12238.0], [64.2, 12251.0], [64.3, 12252.0], [64.4, 12254.0], [64.5, 12257.0], [64.6, 12268.0], [64.7, 12274.0], [64.8, 12278.0], [64.9, 12298.0], [65.0, 12321.0], [65.1, 12326.0], [65.2, 12334.0], [65.3, 12334.0], [65.4, 12343.0], [65.5, 12348.0], [65.6, 12353.0], [65.7, 12366.0], [65.8, 12395.0], [65.9, 12406.0], [66.0, 12450.0], [66.1, 12452.0], [66.2, 12487.0], [66.3, 12491.0], [66.4, 12500.0], [66.5, 12513.0], [66.6, 12514.0], [66.7, 12523.0], [66.8, 12580.0], [66.9, 12586.0], [67.0, 12622.0], [67.1, 12656.0], [67.2, 12656.0], [67.3, 12662.0], [67.4, 12696.0], [67.5, 12711.0], [67.6, 12711.0], [67.7, 12728.0], [67.8, 12740.0], [67.9, 12750.0], [68.0, 12770.0], [68.1, 12773.0], [68.2, 12806.0], [68.3, 12845.0], [68.4, 12867.0], [68.5, 12890.0], [68.6, 12896.0], [68.7, 12906.0], [68.8, 12944.0], [68.9, 12951.0], [69.0, 12963.0], [69.1, 12964.0], [69.2, 12978.0], [69.3, 12986.0], [69.4, 12998.0], [69.5, 13008.0], [69.6, 13014.0], [69.7, 13037.0], [69.8, 13037.0], [69.9, 13053.0], [70.0, 13055.0], [70.1, 13063.0], [70.2, 13074.0], [70.3, 13078.0], [70.4, 13088.0], [70.5, 13094.0], [70.6, 13097.0], [70.7, 13109.0], [70.8, 13112.0], [70.9, 13127.0], [71.0, 13147.0], [71.1, 13148.0], [71.2, 13154.0], [71.3, 13175.0], [71.4, 13180.0], [71.5, 13194.0], [71.6, 13196.0], [71.7, 13207.0], [71.8, 13213.0], [71.9, 13258.0], [72.0, 13268.0], [72.1, 13282.0], [72.2, 13295.0], [72.3, 13302.0], [72.4, 13370.0], [72.5, 13389.0], [72.6, 13391.0], [72.7, 13419.0], [72.8, 13427.0], [72.9, 13436.0], [73.0, 13445.0], [73.1, 13446.0], [73.2, 13452.0], [73.3, 13456.0], [73.4, 13476.0], [73.5, 13487.0], [73.6, 13489.0], [73.7, 13493.0], [73.8, 13497.0], [73.9, 13499.0], [74.0, 13509.0], [74.1, 13510.0], [74.2, 13524.0], [74.3, 13527.0], [74.4, 13533.0], [74.5, 13536.0], [74.6, 13542.0], [74.7, 13562.0], [74.8, 13565.0], [74.9, 13568.0], [75.0, 13572.0], [75.1, 13573.0], [75.2, 13574.0], [75.3, 13575.0], [75.4, 13581.0], [75.5, 13590.0], [75.6, 13592.0], [75.7, 13600.0], [75.8, 13601.0], [75.9, 13606.0], [76.0, 13613.0], [76.1, 13616.0], [76.2, 13620.0], [76.3, 13621.0], [76.4, 13623.0], [76.5, 13625.0], [76.6, 13630.0], [76.7, 13632.0], [76.8, 13632.0], [76.9, 13641.0], [77.0, 13643.0], [77.1, 13643.0], [77.2, 13656.0], [77.3, 13657.0], [77.4, 13659.0], [77.5, 13663.0], [77.6, 13664.0], [77.7, 13670.0], [77.8, 13672.0], [77.9, 13679.0], [78.0, 13682.0], [78.1, 13689.0], [78.2, 13693.0], [78.3, 13694.0], [78.4, 13695.0], [78.5, 13696.0], [78.6, 13696.0], [78.7, 13698.0], [78.8, 13700.0], [78.9, 13705.0], [79.0, 13706.0], [79.1, 13706.0], [79.2, 13710.0], [79.3, 13711.0], [79.4, 13714.0], [79.5, 13715.0], [79.6, 13715.0], [79.7, 13719.0], [79.8, 13726.0], [79.9, 13733.0], [80.0, 13735.0], [80.1, 13736.0], [80.2, 13740.0], [80.3, 13745.0], [80.4, 13749.0], [80.5, 13753.0], [80.6, 13755.0], [80.7, 13758.0], [80.8, 13761.0], [80.9, 13765.0], [81.0, 13771.0], [81.1, 13775.0], [81.2, 13777.0], [81.3, 13781.0], [81.4, 13784.0], [81.5, 13785.0], [81.6, 13791.0], [81.7, 13808.0], [81.8, 13811.0], [81.9, 13830.0], [82.0, 13836.0], [82.1, 13837.0], [82.2, 13850.0], [82.3, 13851.0], [82.4, 13867.0], [82.5, 13873.0], [82.6, 13882.0], [82.7, 13909.0], [82.8, 13910.0], [82.9, 13911.0], [83.0, 13921.0], [83.1, 13924.0], [83.2, 13936.0], [83.3, 13941.0], [83.4, 13951.0], [83.5, 13957.0], [83.6, 13970.0], [83.7, 13971.0], [83.8, 13973.0], [83.9, 13984.0], [84.0, 13993.0], [84.1, 14015.0], [84.2, 14023.0], [84.3, 14041.0], [84.4, 14048.0], [84.5, 14055.0], [84.6, 14062.0], [84.7, 14076.0], [84.8, 14082.0], [84.9, 14089.0], [85.0, 14098.0], [85.1, 14099.0], [85.2, 14116.0], [85.3, 14135.0], [85.4, 14142.0], [85.5, 14183.0], [85.6, 14184.0], [85.7, 14187.0], [85.8, 14187.0], [85.9, 14191.0], [86.0, 14202.0], [86.1, 14227.0], [86.2, 14234.0], [86.3, 14235.0], [86.4, 14241.0], [86.5, 14269.0], [86.6, 14270.0], [86.7, 14275.0], [86.8, 14284.0], [86.9, 14294.0], [87.0, 14316.0], [87.1, 14327.0], [87.2, 14349.0], [87.3, 14352.0], [87.4, 14375.0], [87.5, 14387.0], [87.6, 14412.0], [87.7, 14414.0], [87.8, 14425.0], [87.9, 14476.0], [88.0, 14484.0], [88.1, 14490.0], [88.2, 14509.0], [88.3, 14521.0], [88.4, 14547.0], [88.5, 14566.0], [88.6, 14569.0], [88.7, 14600.0], [88.8, 14626.0], [88.9, 14648.0], [89.0, 14656.0], [89.1, 14701.0], [89.2, 14718.0], [89.3, 14722.0], [89.4, 14739.0], [89.5, 14747.0], [89.6, 14749.0], [89.7, 14757.0], [89.8, 14762.0], [89.9, 14765.0], [90.0, 14798.0], [90.1, 14811.0], [90.2, 14816.0], [90.3, 14817.0], [90.4, 14843.0], [90.5, 14854.0], [90.6, 14862.0], [90.7, 14863.0], [90.8, 14866.0], [90.9, 14883.0], [91.0, 14887.0], [91.1, 14889.0], [91.2, 14891.0], [91.3, 14893.0], [91.4, 14895.0], [91.5, 14897.0], [91.6, 14904.0], [91.7, 14906.0], [91.8, 14906.0], [91.9, 14909.0], [92.0, 14911.0], [92.1, 14911.0], [92.2, 14913.0], [92.3, 14913.0], [92.4, 14927.0], [92.5, 14933.0], [92.6, 14935.0], [92.7, 14943.0], [92.8, 14944.0], [92.9, 14944.0], [93.0, 14949.0], [93.1, 14950.0], [93.2, 14956.0], [93.3, 14957.0], [93.4, 14959.0], [93.5, 14962.0], [93.6, 14964.0], [93.7, 14967.0], [93.8, 14970.0], [93.9, 14975.0], [94.0, 14983.0], [94.1, 14985.0], [94.2, 14988.0], [94.3, 14989.0], [94.4, 14990.0], [94.5, 14997.0], [94.6, 14997.0], [94.7, 14998.0], [94.8, 14999.0], [94.9, 15003.0], [95.0, 15005.0], [95.1, 15008.0], [95.2, 15013.0], [95.3, 15014.0], [95.4, 15017.0], [95.5, 15027.0], [95.6, 15030.0], [95.7, 15036.0], [95.8, 15037.0], [95.9, 15041.0], [96.0, 15044.0], [96.1, 15045.0], [96.2, 15045.0], [96.3, 15045.0], [96.4, 15047.0], [96.5, 15051.0], [96.6, 15054.0], [96.7, 15059.0], [96.8, 15060.0], [96.9, 15062.0], [97.0, 15063.0], [97.1, 15065.0], [97.2, 15070.0], [97.3, 15073.0], [97.4, 15076.0], [97.5, 15080.0], [97.6, 15081.0], [97.7, 15082.0], [97.8, 15084.0], [97.9, 15085.0], [98.0, 15092.0], [98.1, 15097.0], [98.2, 15101.0], [98.3, 15115.0], [98.4, 15119.0], [98.5, 15133.0], [98.6, 15139.0], [98.7, 15149.0], [98.8, 15152.0], [98.9, 15156.0], [99.0, 15175.0], [99.1, 15177.0], [99.2, 15185.0], [99.3, 15188.0], [99.4, 15191.0], [99.5, 15200.0], [99.6, 15203.0], [99.7, 15207.0], [99.8, 15223.0], [99.9, 15250.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 53.0, "series": [{"data": [[300.0, 6.0], [400.0, 9.0], [500.0, 4.0], [600.0, 11.0], [1100.0, 3.0], [1200.0, 14.0], [1300.0, 34.0], [1400.0, 31.0], [1500.0, 21.0], [1600.0, 15.0], [1700.0, 18.0], [1800.0, 13.0], [1900.0, 27.0], [2000.0, 18.0], [2100.0, 11.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 7.0], [2500.0, 6.0], [2600.0, 7.0], [2700.0, 7.0], [2800.0, 1.0], [2900.0, 4.0], [3000.0, 3.0], [3200.0, 5.0], [3300.0, 4.0], [3400.0, 3.0], [3500.0, 16.0], [3700.0, 7.0], [3600.0, 6.0], [3800.0, 6.0], [3900.0, 6.0], [4000.0, 7.0], [4100.0, 14.0], [4200.0, 7.0], [4300.0, 9.0], [4400.0, 8.0], [4500.0, 14.0], [4600.0, 12.0], [4700.0, 3.0], [4800.0, 7.0], [5000.0, 9.0], [4900.0, 4.0], [5100.0, 7.0], [5200.0, 7.0], [5300.0, 3.0], [5400.0, 8.0], [5500.0, 6.0], [5600.0, 3.0], [5700.0, 11.0], [5800.0, 2.0], [5900.0, 19.0], [6000.0, 13.0], [6100.0, 14.0], [6200.0, 13.0], [6300.0, 3.0], [6400.0, 9.0], [6500.0, 11.0], [6600.0, 13.0], [6700.0, 8.0], [6800.0, 9.0], [6900.0, 6.0], [7000.0, 5.0], [7100.0, 5.0], [7200.0, 5.0], [7300.0, 7.0], [7400.0, 7.0], [7500.0, 10.0], [7600.0, 15.0], [7700.0, 8.0], [7800.0, 5.0], [7900.0, 6.0], [8000.0, 2.0], [8100.0, 3.0], [8200.0, 4.0], [8300.0, 7.0], [8400.0, 8.0], [8500.0, 3.0], [8600.0, 5.0], [8700.0, 6.0], [8800.0, 5.0], [8900.0, 8.0], [9000.0, 3.0], [9100.0, 5.0], [9200.0, 5.0], [9300.0, 5.0], [9400.0, 4.0], [9500.0, 9.0], [9700.0, 25.0], [9600.0, 16.0], [9800.0, 29.0], [9900.0, 20.0], [10000.0, 29.0], [10100.0, 13.0], [10200.0, 12.0], [10300.0, 7.0], [10400.0, 3.0], [10500.0, 12.0], [10600.0, 10.0], [10700.0, 8.0], [10800.0, 2.0], [10900.0, 4.0], [11000.0, 6.0], [11100.0, 10.0], [11200.0, 13.0], [11300.0, 16.0], [11400.0, 10.0], [11500.0, 5.0], [11600.0, 4.0], [11700.0, 1.0], [11800.0, 5.0], [11900.0, 5.0], [12000.0, 6.0], [12200.0, 18.0], [12100.0, 3.0], [12300.0, 14.0], [12400.0, 9.0], [12500.0, 10.0], [12600.0, 8.0], [12700.0, 10.0], [12800.0, 9.0], [13000.0, 20.0], [12900.0, 12.0], [13100.0, 15.0], [13200.0, 10.0], [13300.0, 7.0], [13400.0, 20.0], [13500.0, 28.0], [13600.0, 49.0], [13700.0, 47.0], [13800.0, 15.0], [13900.0, 23.0], [14000.0, 17.0], [14200.0, 15.0], [14100.0, 14.0], [14300.0, 10.0], [14400.0, 10.0], [14500.0, 8.0], [14600.0, 6.0], [14700.0, 16.0], [14800.0, 24.0], [14900.0, 52.0], [15000.0, 53.0], [15100.0, 21.0], [15200.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1488.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 82.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1488.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 30.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 181.70574712643668, "minX": 1.7169909E12, "maxY": 286.8205479452055, "series": [{"data": [[1.7169909E12, 181.70574712643668], [1.71699096E12, 286.8205479452055]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699096E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2236.7333333333336, "minX": 1.0, "maxY": 15207.0, "series": [{"data": [[2.0, 14890.0], [3.0, 14911.0], [4.0, 14998.0], [5.0, 15030.0], [6.0, 15017.0], [7.0, 14872.0], [8.0, 14985.0], [9.0, 14815.0], [10.0, 14965.0], [11.0, 14956.0], [12.0, 14970.0], [13.0, 14817.0], [14.0, 14907.0], [15.0, 14832.0], [17.0, 15029.5], [18.0, 14796.0], [19.0, 14885.0], [21.0, 14879.0], [22.0, 14911.0], [23.0, 14935.0], [24.0, 14906.0], [25.0, 14964.0], [26.0, 14988.0], [27.0, 14957.0], [28.0, 14944.0], [29.0, 14959.0], [30.0, 14893.0], [31.0, 14897.0], [33.0, 14905.0], [32.0, 14913.0], [35.0, 14930.0], [34.0, 14910.0], [37.0, 8023.0], [36.0, 14894.0], [39.0, 3972.0], [38.0, 15054.0], [40.0, 4605.5], [41.0, 5817.666666666667], [42.0, 4004.0], [43.0, 2469.083333333333], [44.0, 2236.7333333333336], [45.0, 2891.777777777778], [46.0, 2467.1538461538457], [47.0, 4774.0], [48.0, 2376.3333333333335], [49.0, 2522.5384615384614], [50.0, 3775.833333333333], [51.0, 3186.0], [52.0, 8305.5], [53.0, 5996.0], [55.0, 2996.6], [54.0, 4997.5], [56.0, 3375.875], [57.0, 3648.5714285714284], [58.0, 3161.5], [59.0, 15015.0], [61.0, 6291.0], [60.0, 15043.0], [62.0, 4012.833333333333], [63.0, 5167.25], [64.0, 2480.9230769230767], [65.0, 3591.5], [66.0, 3399.888888888889], [67.0, 4091.333333333333], [70.0, 4222.666666666666], [69.0, 8512.5], [68.0, 8472.5], [71.0, 4310.0], [73.0, 8637.0], [72.0, 8564.5], [75.0, 6564.333333333333], [74.0, 15046.0], [76.0, 2314.25], [77.0, 10823.0], [79.0, 8778.0], [78.0, 8716.5], [80.0, 8763.5], [81.0, 5633.75], [83.0, 8843.5], [82.0, 15101.0], [84.0, 8792.5], [87.0, 6790.666666666667], [86.0, 5732.75], [85.0, 15063.0], [88.0, 6863.333333333333], [90.0, 5156.8], [91.0, 8950.5], [89.0, 15115.0], [92.0, 8736.5], [93.0, 8727.5], [94.0, 6701.666666666667], [95.0, 15144.0], [96.0, 8821.0], [97.0, 6827.333333333333], [98.0, 6883.333333333333], [99.0, 8997.5], [101.0, 5448.8], [103.0, 9066.0], [102.0, 7060.333333333334], [100.0, 15177.0], [105.0, 9226.5], [104.0, 9227.0], [107.0, 6300.25], [106.0, 9228.5], [108.0, 7306.0], [109.0, 7331.666666666666], [110.0, 7300.666666666666], [111.0, 15207.0], [113.0, 9360.5], [115.0, 5477.833333333333], [114.0, 15086.0], [112.0, 15191.0], [119.0, 5923.6], [118.0, 5890.6], [117.0, 5055.0], [116.0, 5254.857142857143], [123.0, 6634.75], [122.0, 15101.0], [121.0, 15013.0], [120.0, 15060.0], [124.0, 6647.75], [125.0, 7589.666666666666], [126.0, 9496.0], [127.0, 9540.5], [128.0, 9500.0], [129.0, 7663.0], [130.0, 7687.0], [132.0, 6281.2], [131.0, 9505.5], [133.0, 5955.0], [134.0, 5932.5], [135.0, 5731.142857142857], [136.0, 9611.0], [138.0, 5827.428571428572], [139.0, 9658.5], [141.0, 4355.5], [140.0, 4363.0], [142.0, 4385.666666666667], [143.0, 4373.0], [137.0, 15062.0], [144.0, 4464.0], [145.0, 4466.333333333333], [146.0, 4503.666666666667], [147.0, 4531.666666666667], [148.0, 4584.857142857143], [149.0, 13257.916666666668], [150.0, 6361.666666666666], [151.0, 6126.428571428572], [152.0, 7225.5], [153.0, 9771.0], [155.0, 9771.5], [154.0, 9910.0], [156.0, 7402.5], [157.0, 8189.666666666666], [158.0, 9817.5], [159.0, 14701.0], [160.0, 8250.0], [161.0, 9882.0], [162.0, 9878.0], [163.0, 6998.4], [164.0, 9927.0], [166.0, 7027.0], [165.0, 9870.5], [167.0, 6771.666666666666], [168.0, 7124.8], [169.0, 9930.0], [171.0, 9941.5], [174.0, 7236.6], [173.0, 8486.333333333334], [175.0, 10146.5], [172.0, 14749.0], [170.0, 14747.0], [176.0, 8546.0], [178.0, 7776.75], [177.0, 8492.0], [180.0, 8525.0], [179.0, 10068.5], [182.0, 10069.5], [181.0, 8660.0], [183.0, 14566.0], [185.0, 7494.8], [186.0, 7210.833333333334], [187.0, 6927.875000000001], [191.0, 14509.0], [190.0, 14626.0], [189.0, 14414.0], [188.0, 14569.0], [184.0, 14750.0], [192.0, 7018.500000000001], [193.0, 7175.142857142857], [194.0, 6835.699999999999], [195.0, 7703.2], [196.0, 8155.75], [197.0, 7768.0], [198.0, 7769.6], [199.0, 14494.0], [200.0, 7814.6], [201.0, 7363.142857142858], [202.0, 7885.8], [203.0, 8303.25], [204.0, 7913.2], [205.0, 10453.0], [207.0, 7721.666666666666], [206.0, 9023.0], [209.0, 8401.75], [210.0, 10407.0], [212.0, 9139.333333333334], [211.0, 9114.333333333334], [213.0, 7856.166666666667], [214.0, 8139.4], [215.0, 8217.2], [208.0, 14375.0], [216.0, 7743.857142857143], [217.0, 7955.333333333334], [219.0, 9259.333333333334], [220.0, 9278.666666666666], [221.0, 8311.4], [222.0, 8694.75], [223.0, 9359.666666666666], [218.0, 14270.0], [224.0, 9329.666666666666], [225.0, 8744.75], [227.0, 9395.0], [226.0, 10622.5], [229.0, 9476.0], [228.0, 10591.5], [231.0, 9479.0], [230.0, 14142.0], [232.0, 8932.25], [235.0, 8643.2], [234.0, 10753.5], [236.0, 10719.0], [237.0, 9038.75], [238.0, 9057.0], [239.0, 14098.0], [233.0, 14105.0], [240.0, 10813.0], [242.0, 9099.0], [244.0, 9188.75], [243.0, 8449.142857142857], [247.0, 9215.5], [246.0, 9245.5], [245.0, 8680.833333333334], [241.0, 14099.0], [248.0, 8945.0], [250.0, 10873.5], [249.0, 10892.0], [251.0, 9874.0], [253.0, 9853.666666666666], [252.0, 9836.666666666666], [255.0, 9930.333333333334], [254.0, 9910.333333333334], [257.0, 9736.0], [256.0, 9959.666666666666], [259.0, 9834.333333333334], [258.0, 13931.0], [269.0, 9723.25], [270.0, 10209.333333333334], [271.0, 10225.666666666666], [268.0, 10159.0], [261.0, 9434.75], [260.0, 13970.0], [262.0, 9999.666666666666], [263.0, 11026.5], [264.0, 9621.75], [267.0, 10161.333333333334], [266.0, 11055.5], [265.0, 13910.0], [274.0, 11390.5], [272.0, 9806.0], [273.0, 13909.0], [275.0, 10285.0], [284.0, 11245.5], [285.0, 10457.0], [286.0, 11189.5], [287.0, 10495.666666666666], [276.0, 9818.5], [279.0, 10382.666666666666], [278.0, 11341.0], [277.0, 13873.0], [280.0, 10349.333333333334], [281.0, 10477.333333333334], [283.0, 10449.0], [282.0, 10416.0], [289.0, 9914.6], [288.0, 11259.0], [291.0, 11354.0], [290.0, 11387.0], [292.0, 11423.5], [293.0, 11495.5], [294.0, 10274.0], [295.0, 11505.0], [297.0, 10253.75], [296.0, 13714.0], [302.0, 10776.666666666666], [301.0, 13740.0], [300.0, 13575.0], [303.0, 13592.0], [298.0, 10802.0], [299.0, 10180.8], [305.0, 10168.0], [304.0, 11597.5], [307.0, 11568.5], [306.0, 13653.0], [316.0, 10206.555555555555], [317.0, 10206.799999999997], [318.0, 10107.285714285714], [319.0, 10213.09090909091], [308.0, 11551.5], [309.0, 10159.0], [310.0, 10943.666666666666], [311.0, 10084.0], [312.0, 10104.222222222223], [314.0, 10198.25], [313.0, 13758.0], [315.0, 10309.714285714286], [322.0, 11778.0], [326.0, 11304.333333333334], [320.0, 10147.809523809523], [321.0, 13659.0], [325.0, 10325.142857142859], [324.0, 10267.266666666665], [323.0, 10927.5], [332.0, 10623.199999999999], [333.0, 11945.5], [335.0, 11989.0], [328.0, 13715.0], [334.0, 13590.0], [327.0, 11304.0], [329.0, 10847.2], [330.0, 10925.4], [331.0, 10832.666666666668], [336.0, 12043.0], [338.0, 11275.5], [337.0, 13713.0], [339.0, 13700.0], [342.0, 10996.625], [343.0, 11007.0], [345.0, 11091.75], [346.0, 11234.6], [347.0, 13910.0], [344.0, 11640.333333333334], [348.0, 11732.333333333334], [341.0, 11355.5], [340.0, 12174.0], [354.0, 10947.0], [358.0, 11031.666666666666], [357.0, 10960.0], [359.0, 11147.25], [360.0, 11093.0], [367.0, 11287.25], [366.0, 11354.5], [361.0, 11202.8], [362.0, 11167.0], [363.0, 11195.333333333334], [365.0, 11317.888888888887], [364.0, 11316.857142857143], [369.0, 11475.5], [368.0, 11352.75], [371.0, 11464.666666666666], [370.0, 11465.5], [372.0, 11518.0], [374.0, 11672.0], [375.0, 13627.785714285714], [376.0, 12636.5], [377.0, 13714.0], [382.0, 12822.5], [383.0, 12739.5], [380.0, 12413.666666666666], [381.0, 12700.0], [378.0, 12720.0], [379.0, 12438.0], [387.0, 12605.333333333334], [385.0, 12490.666666666666], [386.0, 12799.5], [388.0, 12381.0], [389.0, 12812.0], [392.0, 12430.666666666666], [393.0, 13621.0], [398.0, 12463.666666666666], [399.0, 12785.666666666666], [396.0, 12461.5], [397.0, 12432.125], [391.0, 12819.5], [384.0, 13643.0], [390.0, 13696.0], [395.0, 12554.75], [394.0, 12901.0], [401.0, 12725.75], [400.0, 12643.2], [402.0, 12856.0], [403.0, 12726.4], [404.0, 12722.8], [405.0, 13437.0], [406.0, 9353.0], [407.0, 10673.95652173913], [408.0, 9619.297872340423], [409.0, 10880.5], [410.0, 12891.137931034482], [411.0, 6942.0], [1.0, 15045.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[229.66437499999998, 8954.27749999999]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 411.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1418.0833333333333, "minX": 1.7169909E12, "maxY": 1870253.5, "series": [{"data": [[1.7169909E12, 1870253.5], [1.71699096E12, 1505681.1666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7169909E12, 1725.5], [1.71699096E12, 1418.0833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699096E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5608.188505747127, "minX": 1.7169909E12, "maxY": 12942.082191780828, "series": [{"data": [[1.7169909E12, 5608.188505747127], [1.71699096E12, 12942.082191780828]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699096E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5207.265517241377, "minX": 1.7169909E12, "maxY": 12538.532876712323, "series": [{"data": [[1.7169909E12, 5207.265517241377], [1.71699096E12, 12538.532876712323]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699096E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 422.2310344827585, "minX": 1.7169909E12, "maxY": 449.575342465753, "series": [{"data": [[1.7169909E12, 422.2310344827585], [1.71699096E12, 449.575342465753]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699096E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1123.0, "minX": 1.7169909E12, "maxY": 15292.0, "series": [{"data": [[1.7169909E12, 10508.0], [1.71699096E12, 15292.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7169909E12, 1123.0], [1.71699096E12, 10430.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7169909E12, 9875.6], [1.71699096E12, 15034.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7169909E12, 10309.29], [1.71699096E12, 15202.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7169909E12, 5732.5], [1.71699096E12, 13690.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7169909E12, 10058.8], [1.71699096E12, 15084.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699096E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 411.0, "minX": 5.0, "maxY": 14998.0, "series": [{"data": [[32.0, 13142.5], [34.0, 13481.5], [16.0, 10953.5], [17.0, 11833.0], [19.0, 5441.0], [20.0, 4982.5], [5.0, 14998.0], [21.0, 7549.5], [22.0, 5616.5], [23.0, 10615.5], [6.0, 1202.0], [24.0, 6918.0], [25.0, 6109.0], [26.0, 10307.0], [27.0, 9756.0], [28.0, 12591.0], [29.0, 13660.5], [30.0, 12391.5], [31.0, 2101.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 411.0], [34.0, 612.5], [28.0, 618.0], [29.0, 528.5], [31.0, 576.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 14600.0, "series": [{"data": [[32.0, 12755.0], [34.0, 13083.5], [16.0, 10328.0], [17.0, 11427.0], [19.0, 5047.0], [20.0, 4585.0], [5.0, 14600.0], [21.0, 7135.5], [22.0, 5227.0], [23.0, 10225.0], [6.0, 824.0], [24.0, 6526.5], [25.0, 5714.0], [26.0, 9842.0], [27.0, 9353.0], [28.0, 12211.0], [29.0, 13266.5], [30.0, 11998.0], [31.0, 1680.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [34.0, 612.5], [28.0, 618.0], [29.0, 309.0], [31.0, 576.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.55, "minX": 1.7169909E12, "maxY": 20.116666666666667, "series": [{"data": [[1.7169909E12, 20.116666666666667], [1.71699096E12, 6.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699096E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.7169909E12, "maxY": 14.5, "series": [{"data": [[1.7169909E12, 14.5], [1.71699096E12, 11.666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71699096E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.71699096E12, 0.25]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71699096E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.7169909E12, "maxY": 14.5, "series": [{"data": [[1.7169909E12, 14.5], [1.71699096E12, 11.666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71699096E12, 0.5]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699096E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.7169909E12, "maxY": 14.5, "series": [{"data": [[1.7169909E12, 14.5], [1.71699096E12, 11.666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71699096E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71699096E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

